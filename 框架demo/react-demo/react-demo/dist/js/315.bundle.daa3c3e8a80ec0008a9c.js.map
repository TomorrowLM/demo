{"version":3,"file":"js/315.bundle.daa3c3e8a80ec0008a9c.js","mappings":"gaAAA,U,IACA,UACA,W,uDACMA,EAAAA,SAAAA,GACJ,WAAYC,I,4FAAO,e,iKAAA,wDACXA,IADW,SAGnBC,MAAQ,CACNC,KAAM,oBAJW,E,0WAOjB,OACE,wBAAC,EAAAC,SAAD,CAAUC,MAAOC,KAAKJ,MAAMC,MAC1B,mCACE,iCAAIG,KAAKJ,MAAMC,MACf,wBAAC,UAAD,Y,EAZJH,CAAmBO,EAAAA,QAAMC,W,UAkBhBR,G,0TCrBf,W,WACA,U,uDACMS,EAAAA,SAAAA,GACJ,WAAYR,I,4FAAO,e,iKAAA,wDACXA,IADW,SAGnBC,MAAQ,CACNC,KAAM,IAJW,EAMnBO,SAAW,SAACL,GAEV,EAAKM,SAAS,CACZR,KAAME,KATS,E,0WAajB,OACE,mCACE,iCAAIC,KAAKJ,MAAMC,MACf,wBAAC,UAAD,CAAKO,SAAUJ,KAAKI,gB,EAjBtBD,CAAeD,EAAAA,W,UAsBNC,G,iUCxBf,W,2BACA,WACMG,EAAAA,SAAAA,GACJ,WAAYX,GAAO,O,4FAAA,S,iKAAA,wDACXA,I,0WAGN,OACE,wBAAC,EAAAY,SAAD,MACG,SAACV,GAAD,OAEC,mCACE,6CAAaA,W,EAVnBS,CAAiBL,EAAAA,QAAMC,W,UAiBdI,G,8TCnBf,U,IACA,UACA,W,uDACME,EAAAA,SAAAA,GACJ,WAAYb,GAAO,O,4FAAA,S,iKAAA,wDACXA,I,0WAGN,OACE,wBAAC,EAAAY,SAAD,MACG,SAACV,GAAD,OAEC,mCACE,4CAAYA,GACZ,wBAAC,UAAD,c,EAXNW,CAAgBP,EAAAA,QAAMC,W,UAkBbM,G,iUCrBf,W,2BACMC,EAAAA,SAAAA,GACJ,WAAYd,I,4FAAO,e,iKAAA,wDACXA,IADW,SAInBe,aAAe,SAACC,GAEd,EAAKhB,MAAMS,SAASO,EAAEC,OAAOb,QAJ7B,EAAKW,aAAe,EAAKA,aAAaG,KAAlB,GAFH,E,0WASjB,OACE,mCACE,iCAAOC,KAAK,OAAOC,SAAUf,KAAKU,oB,EAZpCD,CAAYR,EAAAA,QAAMC,W,UAiBTO,G,8FCjBf,I,QAAA,W,4BAC+BR,QAAMe,cAAc,MAA3CT,EAAAA,EAAAA,SAAUT,EAAAA,EAAAA,S,WACTS,E,WAAUT,G,gECHnB,I,IAAA,U,IACA,U,IACA,U,6DACoB,SAAUH,GAC5B,OACE,mCACE,mCACE,mCACE,+CACA,wBAAC,UAAD,OAEF,mCACE,4DACA,wBAAC,UAAD","sources":["webpack://demo/./src/view/Communicate/Communicate/components/Father-context.jsx","webpack://demo/./src/view/Communicate/Communicate/components/Father.jsx","webpack://demo/./src/view/Communicate/Communicate/components/GrandSon-context.jsx","webpack://demo/./src/view/Communicate/Communicate/components/Son-context.jsx","webpack://demo/./src/view/Communicate/Communicate/components/Son.jsx","webpack://demo/./src/view/Communicate/Communicate/components/context.js","webpack://demo/./src/view/Communicate/Communicate/index.jsx"],"sourcesContent":["import React from 'react'\r\nimport SonText from './Son-context'\r\nimport { Provider } from './context'\r\nclass FatherText extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n  }\r\n  state = {\r\n    info: 'info from father',\r\n  }\r\n  render() {\r\n    return (\r\n      <Provider value={this.state.info}>\r\n        <div>\r\n          <p>{this.state.info}</p>\r\n          <SonText />\r\n        </div>\r\n      </Provider>\r\n    )\r\n  }\r\n}\r\nexport default FatherText","import React, { Component } from 'react'\r\nimport Son from './Son.jsx'\r\nclass Father extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n  }\r\n  state = {\r\n    info: '',\r\n  }\r\n  callback = (value) => {\r\n    // 此处的value便是子组件带回\r\n    this.setState({\r\n      info: value,\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p>{this.state.info}</p>\r\n        <Son callback={this.callback} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Father","import React from 'react'\r\nimport { Consumer } from './context'\r\nclass GrandSon extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n  }\r\n  render() {\r\n    return (\r\n      <Consumer>\r\n        {(info) => (\r\n          // 通过 Consumer 中可以直接获取组父组件的值\r\n          <div>\r\n            <p>爷爷组件传递的值:{info}</p>\r\n          </div>\r\n        )}\r\n      </Consumer>\r\n    )\r\n  }\r\n}\r\nexport default GrandSon\r\n","import React,{useContext} from 'react'\r\nimport GrandSon from './GrandSon-context'\r\nimport { Consumer } from './context'\r\nclass SonText extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n  }\r\n  render() {\r\n    return (\r\n      <Consumer>\r\n        {(info) => (\r\n          // 通过Consumer直接获取父组件的值\r\n          <div>\r\n            <p>父组件传递的值:{info}</p>\r\n            <GrandSon></GrandSon>\r\n          </div>  \r\n        )}\r\n      </Consumer>\r\n    )\r\n  }\r\n}\r\nexport default SonText","import React from 'react'\r\nclass Son extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.handleChange = this.handleChange.bind(this)\r\n  }\r\n  handleChange = (e) => {\r\n    // 在此处将参数带回\r\n    this.props.callback(e.target.value)\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <input type='text' onChange={this.handleChange} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Son","// context.js\r\nimport React from 'react'\r\nconst { Consumer, Provider } = React.createContext(null) //创建 context 并暴露Consumer和Provide\r\nexport { Consumer, Provider }","import Father from \"./components/Father\";\nimport FatherText from \"./components/Father-context\";\nimport React from \"react\";\nconst Communicate = function (props) {\n  return (\n    <div>\n      <div>\n        <div>\n          <h1>1.子组件传父组件</h1>\n          <Father></Father>\n        </div>\n        <div>\n          <h1>2.Context:适用于跨层级组件之间通信</h1>\n          <FatherText></FatherText>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default Communicate;\n"],"names":["FatherText","props","state","info","Provider","value","this","React","Component","Father","callback","setState","GrandSon","Consumer","SonText","Son","handleChange","e","target","bind","type","onChange","createContext"],"sourceRoot":""}