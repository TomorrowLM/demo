{"version":3,"file":"js/679.bundle.daa3c3e8a80ec0008a9c.js","mappings":"+hBAAA,WACA,W,OACA,W,4DAEQA,EAAgBC,EAAAA,WAAhBD,MAAgBC,EAAAA,WAATC,K,UACf,WAAyB,OAIK,IAAAC,UAAS,GAJd,SAIhBC,EAJgB,KAIRC,EAJQ,QAKC,IAAAF,WAAS,GALV,SAKhBG,EALgB,KAKVC,EALU,KAyDvB,OANA,IAAAC,YAAU,WACRC,QAAQC,IAAI,SAMZ,mCACE,mCACE,wBAACV,EAAD,CAAOW,MAAO,GAAd,mBACA,mCACE,6BAAGC,MAAO,CAAEC,MAAOP,EAAO,OAAS,UAAYF,GAC/C,wBAAC,EAAAU,MAAD,KACE,wBAAC,EAAAC,OAAD,CAAQC,QA1DlB,WACEX,EAAUD,EAAS,GACnBC,EAAUD,EAAS,GACnBG,GAAQ,SAACU,GAAD,OAAQA,OAuDR,QACA,wBAAC,EAAAF,OAAD,CAAQC,QArDlB,WAEEX,GAAU,SAACa,GAAD,OAAOA,EAAI,KACrBT,QAAQC,IAAIN,GACZC,GAAU,SAACa,GAAD,OAAOA,EAAI,KACrBT,QAAQC,IAAIN,KAgDJ,WACA,wBAAC,EAAAW,OAAD,CAAQC,QA9ClB,WAEEG,YAAW,WACTd,EAAUD,EAAS,GACnBK,QAAQC,IAAIN,GACZG,GAAQ,SAACU,GAAD,OAAQA,OAEf,MAuCK,cACA,wBAAC,EAAAF,OAAD,CAAQC,QArClB,WAEEG,YAAW,YACT,IAAAC,0BAAwB,WACtBf,EAAUD,EAAS,GACnBK,QAAQC,IAAIN,GACZG,GAAQ,SAACU,GAAD,OAAQA,UAEjB,MA6BK,gCAGA,wBAAC,EAAAF,OAAD,CAAQC,QA5BlB,YACE,IAAAK,YAAU,WACRhB,EAAUD,EAAS,OAErB,IAAAiB,YAAU,WACRd,GAAQ,SAACU,GAAD,OAAQA,UAuBV,eAGJ,wBAAC,EAAAK,QAAD","sources":["webpack://demo/./src/view/Hooks/FunctionHooks.jsx"],"sourcesContent":["import { Button, Typography, Divider, Space } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport ReactDOM, { unstable_batchedUpdates, flushSync } from \"react-dom\";\r\n\r\nconst { Title, Text } = Typography;\r\nfunction functionHooks() {\r\n  /**\r\n   * usestate\r\n   */\r\n  const [count1, setCount1] = useState(0);\r\n  const [flag, setFlag] = useState(false);\r\n  function handleClick() {\r\n    setCount1(count1 + 1);\r\n    setCount1(count1 + 1);\r\n    setFlag((f) => !f);\r\n    // React 只会在最后重新渲染一次（这是批处理！）\r\n  }\r\n  function handleClick1() {\r\n    //使用函数式更新\r\n    setCount1((c) => c + 1);\r\n    console.log(count1);\r\n    setCount1((c) => c + 1);\r\n    console.log(count1);\r\n    // React 只会在最后重新渲染一次（这是批处理！）\r\n  }\r\n  function handleClick2() {\r\n    // 模拟一个异步操作，真实业务里面可能是网络请求等\r\n    setTimeout(() => {\r\n      setCount1(count1 + 1);\r\n      console.log(count1);\r\n      setFlag((f) => !f);\r\n      // React18之前 会渲染两次，React 18还是会批处理\r\n    }, 10);\r\n  }\r\n\r\n  function handleClick3() {\r\n    // 手动批处理\r\n    setTimeout(() => {\r\n      unstable_batchedUpdates(() => {\r\n        setCount1(count1 + 1);\r\n        console.log(count1);\r\n        setFlag((f) => !f);\r\n      });\r\n    }, 10);\r\n    // React 只会在最后重新渲染一次（这是批处理！）\r\n  }\r\n\r\n  function handleClick4() {\r\n    flushSync(() => {\r\n      setCount1(count1 + 1);\r\n    });\r\n    flushSync(() => {\r\n      setFlag((f) => !f);\r\n    });\r\n    // React 会渲染两次\r\n  }\r\n  useEffect(() => {\r\n    console.log(\"渲染\");\r\n  });\r\n  /**\r\n   * useReducer\r\n   */\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Title level={4}>批量处理batchUpdate</Title>\r\n        <div>\r\n          <p style={{ color: flag ? \"blue\" : \"black\" }}>{count1}</p>\r\n          <Space>\r\n            <Button onClick={handleClick}> 基础 </Button>\r\n            <Button onClick={handleClick1}> 函数式更新 </Button>\r\n            <Button onClick={handleClick2}>setTimeout</Button>\r\n            <Button onClick={handleClick3}>\r\n              unstable_batchedUpdates手动批处理\r\n            </Button>\r\n            <Button onClick={handleClick4}>flushSync</Button>\r\n          </Space>\r\n        </div>\r\n        <Divider />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default functionHooks;\r\n"],"names":["Title","Typography","Text","useState","count1","setCount1","flag","setFlag","useEffect","console","log","level","style","color","Space","Button","onClick","f","c","setTimeout","unstable_batchedUpdates","flushSync","Divider"],"sourceRoot":""}