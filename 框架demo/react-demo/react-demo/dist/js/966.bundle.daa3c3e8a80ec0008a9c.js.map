{"version":3,"file":"js/966.bundle.daa3c3e8a80ec0008a9c.js","mappings":"gUAAA,W,2BACMA,EAAQC,EAAAA,QAAMC,YAAW,SAACC,EAAOC,GACnC,OACI,mCAAOC,KAAK,OAAOD,IAAKA,GAASD,O,UAG1BH,G,2ECJA,SAAgBG,GAC7B,IAAIG,GAAY,IAAAC,QAAO,MAInBC,GAAY,IAAAD,QAAO,MAIvB,OACE,mCACE,mCACE,yDACA,iCAAOF,KAAK,OAAOD,IAAKE,IACxB,kCAAQG,QAZO,WACnBH,EAAUI,QAAQC,UAWd,UAEF,mCACE,2EAEA,wBAAC,UAAD,CAAOP,IAAKI,IACZ,kCAAQC,QAdO,WACnBD,EAAUE,QAAQC,UAad,YAtBR,e,WACA,U","sources":["webpack://demo/./src/view/Dom/Ref/components/Input.jsx","webpack://demo/./src/view/Dom/Ref/components/UseRef.jsx"],"sourcesContent":["import React, { useRef } from \"react\";\r\nconst Input = React.forwardRef((props, ref) => {\r\n    return (\r\n        <input type=\"text\" ref={ref} {...props} />\r\n    )\r\n});\r\nexport default Input","import React, { useRef } from \"react\";\r\nimport Input from \"./Input\";\r\nexport default function UseRef(props) {\r\n  let inputRef1 = useRef(null);\r\n  const handleClick1 = () => {\r\n    inputRef1.current.focus();\r\n  };\r\n  let inputRef2 = useRef(null);\r\n  const handleClick2 = () => {\r\n    inputRef2.current.focus();\r\n  };\r\n  return (\r\n    <div>\r\n      <div>\r\n        <h1>当 ref 属性用于 HTML 元素时</h1>\r\n        <input type=\"text\" ref={inputRef1} />\r\n        <button onClick={handleClick1}>Click</button>\r\n      </div>\r\n      <div>\r\n        <h1>函数式组件内部中使用useRef属性,并使用forwardRef转发ref</h1>\r\n        {/* 将inputRef2通过forwardRef转发到Input组件中的input */}\r\n        <Input ref={inputRef2}></Input>\r\n        <button onClick={handleClick2}>Click</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":["Input","React","forwardRef","props","ref","type","inputRef1","useRef","inputRef2","onClick","current","focus"],"sourceRoot":""}