{"version":3,"file":"js/846.bundle.3ec5e42d6ae376ae2a2a.js","mappings":"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","sources":["webpack://demo/./src/view/Dom/Ref/components/CallbackRefs.jsx","webpack://demo/./src/view/Dom/Ref/components/Child.jsx","webpack://demo/./src/view/Dom/Ref/components/Different.jsx","webpack://demo/./src/view/Dom/Ref/components/FatherWatchChild.jsx","webpack://demo/./src/view/Dom/Ref/components/FunctionChild.jsx","webpack://demo/./src/view/Dom/Ref/components/Input.jsx","webpack://demo/./src/view/Dom/Ref/components/UseRef.jsx","webpack://demo/./src/view/Dom/Ref/components/UseRefAlert.jsx","webpack://demo/./src/view/Dom/Ref/index.jsx"],"sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass CallbackRefs extends Component {\r\n \r\n  render() {\r\n    return (\r\n      <div>\r\n        <input ref={ this.props.iptRef} type=\"text\" name=\"iptElmClass\"/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default CallbackRefs;\r\n","import React from \"react\";\r\nclass Child extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.textInput = React.createRef();\r\n  }\r\n  render() {\r\n    console.log(this.props)\r\n    return (\r\n      <div>\r\n        <input ref={this.textInput} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Child;\r\n","import React, { createRef, useEffect, useState } from \"react\";\r\n\r\nconst Different = () => {\r\n  const [renderIndex, setRenderIndex] = React.useState(1);\r\n  const refFromUseRef = React.useRef();\r\n  const refFromCreateRef = createRef();\r\n  if (!refFromUseRef.current) {\r\n    refFromUseRef.current = renderIndex;\r\n  }\r\n  if (!refFromCreateRef.current) {\r\n    refFromCreateRef.current = renderIndex;\r\n  }\r\n  return (\r\n    <div>\r\n      <p>Current render index: {renderIndex}</p>\r\n      <p>\r\n        <b>refFromUseRef</b> value: {refFromUseRef.current}\r\n      </p>\r\n      <p>\r\n        <b>refFromCreateRef</b> value:{refFromCreateRef.current}\r\n      </p>\r\n      <button onClick={() => setRenderIndex((prev) => prev + 1)}>\r\n        Cause re-render\r\n      </button>\r\n      {refFromCreateRef.current?\"可以看出useref只是赋值，而createRef则是拷贝地址\":\"\"}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Different;\r\n","import React from \"react\";\r\nexport default function FatherWatchChild(props) {\r\n  return (\r\n    <div>\r\n      <input name=\"iptRef\" type=\"text\" ref={ props.iptRef }/>\r\n    </div>\r\n  );\r\n}\r\n\r\n","import { Button } from \"antd\";\r\nimport React from \"react\";\r\nimport Input from \"./Input\"\r\nexport default function FunctionChild() {\r\n  // textInput 必须被声明在这里——ref才能适用于它\r\n  let textInput = React.createRef();\r\n  const handleClick = () => {\r\n    textInput.current.focus();\r\n    console.log(textInput,textInput.current.value)\r\n  }\r\n  return (\r\n    <div>\r\n      <Input type=\"text\" ref={textInput} />\r\n      <input type=\"button\" value=\"Focus the text input\" onClick={handleClick} />\r\n    </div>\r\n  );\r\n}\r\n\r\n","import React, { useRef } from \"react\";\r\nconst Input = React.forwardRef((props, ref) => {\r\n    return (\r\n        <input type=\"text\" ref={ref} {...props} />\r\n    )\r\n});\r\nexport default Input","import React, { useRef } from \"react\";\r\nimport Input from \"./Input\";\r\nexport default function UseRef(props) {\r\n  let inputRef1 = useRef(null);\r\n  const handleClick1 = () => {\r\n    inputRef1.current.focus();\r\n  };\r\n  let inputRef2 = useRef(null);\r\n  const handleClick2 = () => {\r\n    inputRef2.current.focus();\r\n  };\r\n  return (\r\n    <div>\r\n      <div>\r\n        <h1>当 ref 属性用于 HTML 元素时</h1>\r\n        <input type=\"text\" ref={inputRef1} />\r\n        <button onClick={handleClick1}>Click</button>\r\n      </div>\r\n      <div>\r\n        <h1>函数式组件内部中使用useRef属性,并使用forwardRef转发ref</h1>\r\n        {/* 将inputRef2通过forwardRef转发到Input组件中的input */}\r\n        <Input ref={inputRef2}></Input>\r\n        <button onClick={handleClick2}>Click</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { createRef, useEffect, useState, useRef } from \"react\";\r\n\r\nconst UseRefAlert = () => {\r\n  const [count1, setCount1] = useState(0);\r\n  const [count2, setCount2] = useState(0);\r\n  const latestCount = useRef(count2);\r\n  useEffect(() => {\r\n    latestCount.current = count2;\r\n  });\r\n  function handleAlert1() {\r\n    setTimeout(() => {\r\n      alert(\"you click on \" + count1);\r\n    }, 1000);\r\n  }\r\n  function handleAlert2() {\r\n    setTimeout(() => {\r\n      alert(\"you click on \" + latestCount.current);\r\n    }, 1000);\r\n  }\r\n  return (\r\n    <div>\r\n      <div>\r\n        {/* alert 不是界面上 count 的实时状态 */}\r\n        <p>you clicked {count1}</p>\r\n        <button\r\n          onClick={() => {\r\n            setCount1(count1 + 1);\r\n          }}\r\n        >\r\n          click me\r\n        </button>\r\n        <button onClick={handleAlert1}>alert</button>\r\n      </div>\r\n      <div>\r\n        <p>you clicked {count2}</p>\r\n        <button\r\n          onClick={() => {\r\n            setCount2(count2 + 1);\r\n          }}\r\n        >\r\n          click me\r\n        </button>\r\n        <button onClick={handleAlert2}>alert</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UseRefAlert;\r\n","import React from \"react\";\r\nimport Child from \"./components/Child\";\r\nimport FunctionChild from \"./components/FunctionChild\";\r\nimport { Typography } from \"antd\";\r\nimport CallbackRefs from \"./components/CallbackRefs\";\r\nimport FatherWatchChild from \"./components/FatherWatchChild\";\r\nimport UseRef from \"./components/UseRef\";\r\nimport Different from \"./components/Different\";\r\nimport UseRefAlert from \"./components/UseRefAlert\";\r\nconst { Title,Text } = Typography;\r\nclass Ref extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.myRef = React.createRef();\r\n    this.inputRef = React.createRef();\r\n  }\r\n  componentDidMount() {\r\n    // 回调\r\n    console.log(\"函数回调,原生 DOM 节点\", this.iptElmDom);\r\n    // this.iptElmDom.focus();\r\n    console.log(\"函数回调,父组件访问函数子组件的 DOM 节点\", this.iptElm);\r\n    // this.iptElm.focus();\r\n    console.log(\"函数回调,父组件访问类子组件的 DOM 节点\", this.iptElmClass);\r\n    // this.iptElmClass.focus();\r\n    // createRef\r\n    console.log(\"createRef,HTML 元素\", this.myRef);\r\n    console.log(\"createRef,class 组件\", this.inputRef.current);\r\n    this.inputRef.current.textInput.current.focus();\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Title level={2}>回调</Title>\r\n        <Title level={5}>原生DOM回调</Title>\r\n        <input ref={(el) => (this.iptElmDom = el)} />\r\n        <Title level={5}>函数回调</Title>\r\n        <FatherWatchChild iptRef={(el) => (this.iptElm = el)} />\r\n        {/* 回调引用（callback refs） */}\r\n        <Title level={5}>类回调</Title>\r\n        <CallbackRefs iptRef={(el) => (this.iptElmClass = el)} ></CallbackRefs>\r\n        <hr />\r\n\r\n        <Title level={2}>createRef</Title>\r\n        {/* // 当 ref 属性用于 HTML 元素时 */}\r\n        <Title level={5}>当 ref 属性用于 HTML 元素时</Title>\r\n        <input ref={this.myRef}></input>\r\n        {/* //当 ref 属性用于自定义 class 组件时 */}\r\n        <Title level={5}>当 ref 属性用于自定义 class 组件时</Title>\r\n        <Child ref={this.inputRef}></Child>\r\n        {/* 你不能将ref属性用于函数式组件上，因为他们并没有实例（instance） */}\r\n        {/* 但是，你可以在函数式组件内部使用ref属性，就像你引用DOM元素和类组件一样。 */}\r\n        <Title level={5}>\r\n          函数式组件内部中使用createRef属性,并使用forwardRef转发ref\r\n        </Title>\r\n        <FunctionChild></FunctionChild>\r\n        <hr />\r\n\r\n        <Title level={2}>useRef</Title>\r\n        <UseRef></UseRef>\r\n        <hr />\r\n\r\n        <Title level={2}>useRef 和 createRef区别</Title>\r\n        <Different></Different>\r\n        <UseRefAlert></UseRefAlert>\r\n        <hr />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Ref;\r\n"],"names":["CallbackRefs","ref","this","props","iptRef","type","name","Component","Child","textInput","React","createRef","console","log","useState","renderIndex","setRenderIndex","refFromUseRef","useRef","refFromCreateRef","current","onClick","prev","value","focus","Input","forwardRef","inputRef1","inputRef2","count1","setCount1","count2","setCount2","latestCount","useEffect","setTimeout","alert","Title","Typography","Ref","Text","myRef","inputRef","iptElmDom","iptElm","iptElmClass","level","el"],"sourceRoot":""}