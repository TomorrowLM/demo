<template>
  <div class="tree">
    <el-popover ref="menuListPopover" placement="bottom-start" trigger="click">
      <div class="tree" :style="{ minWidth: '180px', maxWidth: '250px' }">
        <el-tree
          :data="treeData"
          :props="{ label: 'label', children: 'children' }"
          node-key="label"
          ref="tree"
          render-after-expand
          :show-checkbox="showCheckbox"
          :filter-node-method="filterNode"
          @check-change="handleCheckChange"
          @node-click="handleNodeClick"
        >
        </el-tree>
      </div>
    </el-popover>
    <el-input
      v-popover:menuListPopover
      v-model="filterText"
      @clear="clearInput"
      :placeholder="placeholder"
      clearable
      :ref="`input_${label}`"
    >
      <!-- <span slot="suffix" v-show="true" @click="clearInput">
        <i class="el-icon-close" style="margin-left: 5px; cursor: pointer"></i>
      </span> -->
      <div class="tag" slot="prefix" v-show="true" @click="clearInput">
        <el-tag>12</el-tag>
        <el-tag>12</el-tag>
        <el-tag>12</el-tag>
        <el-tag>12</el-tag>
        <el-tag>12</el-tag>
        <el-tag>12</el-tag>
        <el-tag>12</el-tag>
        <el-tag>12</el-tag>
        <el-tag>12</el-tag>
        <el-tag>12</el-tag>
      </div>
    </el-input>
  </div>
</template>

<script lang="ts">
import { Component, Vue, Prop, PropSync, Watch } from 'vue-property-decorator';

@Component({
  components: {},
})
export default class Layout extends Vue {
  @Prop({
    default: '100%',
  })
  width!: any;
  @Prop({
    default: '100%',
  })
  maxWidth!: any;
  @Prop() public treeData!: any; //查询展示列表
  @Prop() public label!: any;
  @Prop() public showCheckbox!: any;

  @Prop({
    type: String,
    default: '请输入',
  })
  public placeholder!: any;
  @PropSync('inputVal') public syncedInputVal!: any;
  filterText = '';
  checkboxList = [];
  checkboxListLabel = [];

  @Watch('checkboxList')
  watchCheckboxList(val: any) {
    this.syncedInputVal = val;
  }
  @Watch('syncedInputVal')
  watchSyncedInputVal(val: any) {
    if (this.syncedInputVal) {
      this.filterText = this.checkboxListLabel.join();
    } else {
      this.filterText = '';
      (this.$refs.tree as any).setCheckedNodes([]);
    }
  }

  mounted() {
    this.syncedInputVal = [];
    this.filterText = this.syncedInputVal;
    console.log((this.$refs[`input_${this.label}`] as any).$el.style.width);
  }

  //对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示
  filterNode(value: any, data: any) {
    if (!value) return true;
    return data.label.indexOf(value) !== -1;
  }

  handleCheckChange(data, checked, indeterminate) {
    this.checkboxList = [];
    this.checkboxListLabel = [];
    (this.$refs.tree as any).getCheckedNodes().map(val => {
      if (!val.children) {
        this.checkboxList.push(val.value);
        this.checkboxListLabel.push(val.label);
      }
    });
    this.filterText = this.checkboxListLabel.join();
  }

  clearInput() {
    this.checkboxList = [];
    this.checkboxListLabel = [];
    this.$nextTick(() => {
      (this.$refs.tree as any).setCheckedNodes([]);
    });
  }

  handleNodeClick(data, node) {
    // this.checkChange(data, !node.checked);
  }
  checkChange(currData, isChecked) {
    (this.$refs.tree as any).setChecked(currData, isChecked);
  }
}
</script>

<style lang="scss" scoped>
.tree {
  /deep/ .el-input__inner {
    padding: 0 12px;
  }
  /deep/ .el-input__prefix {
    padding-right: 5px;
    width: calc(50% - 5px);
    height: 100%;
    left: calc(50% - 5px);
    box-sizing: border-box;
  }
  .tag {
    display: flex;
    overflow: scroll;
    padding: 0;
    width: 100%;
    height: 100%;
    ::-webkit-scrollbar {
      width: 0; /* 纵向滚动条 宽度 */
      height: 0; /* 横向滚动条 高度 */
      // background: pink; /* 整体背景 */
      border-radius: 10px; /* 整体 圆角 */
    }
    ::scrollbar {
      width: 0; /* 纵向滚动条 宽度 */
      height: 0; /* 横向滚动条 高度 */
    }
  }
}
::-webkit-scrollbar {
  width: 0; /* 纵向滚动条 宽度 */
  height: 0; /* 横向滚动条 高度 */
  // background: pink; /* 整体背景 */
  border-radius: 10px; /* 整体 圆角 */
}
::scrollbar {
  width: 0; /* 纵向滚动条 宽度 */
  height: 0; /* 横向滚动条 高度 */
}
</style>

