{"version":3,"file":"js/vendors-5752ff4f.70f053cfd108db144d64.js","mappings":"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","sources":["webpack://qiankun/./node_modules/@remix-run/router/dist/router.js"],"sourcesContent":["/**\n * @remix-run/router v1.16.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  let history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nfunction parsePath(path) {\n  let parsedPath = {};\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex();\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n}\n//#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\nconst immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\nfunction isIndexRoute(route) {\n  return route.index === true;\n}\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (manifest === void 0) {\n    manifest = {};\n  }\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id\n      });\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id,\n        children: undefined\n      });\n      manifest[id] = pathOrLayoutRoute;\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch(branches[i], decoded);\n  }\n  return matches;\n}\nfunction convertRouteMatchToUiMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n  routes.forEach((route, index) => {\n    var _route$path;\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments;\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = [];\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\")));\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = s => s === \"*\";\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  const stringify = p => p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1;\n    // only apply the splat if it's the last segment\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\";\n      // Apply the splat\n      return stringify(params[star]);\n    }\n    const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n      invariant(optional === \"?\" || param != null, \"Missing \\\":\" + key + \"\\\" param\");\n      return stringify(param);\n    }\n    // Remove any optional markers from optional static segments\n    return segment.replace(/\\?$/g, \"\");\n  })\n  // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = compiledParams.reduce((memo, _ref, index) => {\n    let {\n      paramName,\n      isOptional\n    } = _ref;\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    const value = captureGroups[index];\n    if (isOptional && !value) {\n      memo[paramName] = undefined;\n    } else {\n      memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n    }\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let params = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:([\\w-]+)(\\?)?/g, (_, paramName, isOptional) => {\n    params.push({\n      paramName,\n      isOptional: isOptional != null\n    });\n    return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    params.push({\n      paramName: \"*\"\n    });\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, params];\n}\nfunction decodePath(value) {\n  try {\n    return value.split(\"/\").map(v => decodeURIComponent(v).replace(/\\//g, \"%2F\")).join(\"/\");\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nfunction getResolveToMatches(matches, v7_relativeSplatPath) {\n  let pathMatches = getPathContributingMatches(matches);\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) => idx === matches.length - 1 ? match.pathname : match.pathnameBase);\n  }\n  return pathMatches.map(match => match.pathnameBase);\n}\n/**\n * @private\n */\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  let to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from;\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    }\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  let path = resolvePath(to, from);\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\");\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n    this.init = responseInit;\n  }\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, undefined, data), error => this.onSettle(promise, key, error));\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n    this.pendingKeysSet.delete(key);\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\"Deferred data for key \\\"\" + key + \"\\\" resolved/rejected with `undefined`, \" + \"you must resolve/reject with a value or `null`.\");\n      Object.defineProperty(promise, \"_error\", {\n        get: () => undefinedError\n      });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n  async resolveData(signal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref3) => {\n      let [key, value] = _ref3;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirectDocument = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nclass ErrorResponseImpl {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nconst defaultMapRouteProperties = route => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary)\n});\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a router and listen to history POP navigations\n */\nfunction createRouter(init) {\n  const routerWindow = init.window ? init.window : typeof window !== \"undefined\" ? window : undefined;\n  const isBrowser = typeof routerWindow !== \"undefined\" && typeof routerWindow.document !== \"undefined\" && typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let mapRouteProperties;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Routes keyed by ID\n  let manifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  let inFlightDataRoutes;\n  let basename = init.basename || \"/\";\n  let dataStrategyImpl = init.unstable_dataStrategy || defaultDataStrategy;\n  // Config driven behavior flags\n  let future = _extends({\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    unstable_skipActionErrorRevalidation: false\n  }, init.future);\n  // Cleanup function for history\n  let unlistenHistory = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors = null;\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n  let initialized;\n  let hasLazyRoutes = initialMatches.some(m => m.route.lazy);\n  let hasLoaders = initialMatches.some(m => m.route.loader);\n  if (hasLazyRoutes) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!hasLoaders) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    let isRouteInitialized = m => {\n      // No loader, nothing to initialize\n      if (!m.route.loader) {\n        return true;\n      }\n      // Explicitly opting-in to running on hydration\n      if (typeof m.route.loader === \"function\" && m.route.loader.hydrate === true) {\n        return false;\n      }\n      // Otherwise, initialized if hydrated with data or an error\n      return loaderData && loaderData[m.route.id] !== undefined || errors && errors[m.route.id] !== undefined;\n    };\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      let idx = initialMatches.findIndex(m => errors[m.route.id] !== undefined);\n      initialized = initialMatches.slice(0, idx + 1).every(isRouteInitialized);\n    } else {\n      initialized = initialMatches.every(isRouteInitialized);\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  };\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction = Action.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController;\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions = new Map();\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener = null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads = [];\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map();\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map();\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map();\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map();\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map();\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref;\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1);\n        // Put the blocker into a blocked state\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            });\n            // Re-do the same POP navigation we just blocked\n            init.history.go(delta);\n          },\n          reset() {\n            let blockers = new Map(state.blockers);\n            blockers.set(blockerKey, IDLE_BLOCKER);\n            updateState({\n              blockers\n            });\n          }\n        });\n        return;\n      }\n      return startNavigation(historyAction, location);\n    });\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () => persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () => routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location, {\n        initialHydration: true\n      });\n    }\n    return router;\n  }\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n  // Subscribe to state updates for the router\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n  // Update our state and notify the calling context of the change\n  function updateState(newState, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state = _extends({}, state, newState);\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers = [];\n    let deletedFetchersKeys = [];\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach(subscriber => subscriber(state, {\n      deletedFetchers: deletedFetchersKeys,\n      unstable_viewTransitionOpts: opts.viewTransitionOpts,\n      unstable_flushSync: opts.flushSync === true\n    }));\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach(key => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach(key => deleteFetcher(key));\n    }\n  }\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(location, newState, _temp) {\n    var _location$state, _location$state2;\n    let {\n      flushSync\n    } = _temp === void 0 ? {} : _temp;\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n    if (isUninterruptedRevalidation) ; else if (pendingAction === Action.Pop) ; else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    }\n    let viewTransitionOpts;\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === Action.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location\n      };\n    }\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers\n    }), {\n      viewTransitionOpts,\n      flushSync: flushSync === true\n    });\n    // Reset stateful navigation vars\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, future.v7_relativeSplatPath, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ; else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey, IDLE_BLOCKER);\n          updateState({\n            blockers\n          });\n        }\n      });\n      return;\n    }\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition,\n      flushSync\n    });\n  }\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    });\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    }\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  }\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      }, {\n        flushSync\n      });\n      return;\n    }\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      }, {\n        flushSync\n      });\n      return;\n    }\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionResult;\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingActionResult = [findNearestBoundary(matches).route.id, {\n        type: ResultType.error,\n        error: opts.pendingError\n      }];\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionResult = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace,\n        flushSync\n      });\n      if (actionResult.shortCircuited) {\n        return;\n      }\n      pendingActionResult = actionResult.pendingActionResult;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n      // Create a GET request for the loaders\n      request = createClientSideRequest(init.history, request.url, request.signal);\n    }\n    // Call loaders\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, opts && opts.initialHydration === true, flushSync, pendingActionResult);\n    if (shortCircuited) {\n      return;\n    }\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches\n    }, getActionDataForCommit(pendingActionResult), {\n      loaderData,\n      errors\n    }));\n  }\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(request, location, submission, matches, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    interruptActiveLoads();\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({\n      navigation\n    }, {\n      flushSync: opts.flushSync === true\n    });\n    // Call our action and get the result\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      let results = await callDataStrategy(\"action\", request, [actionMatch], matches);\n      result = results[0];\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n    if (isRedirectResult(result)) {\n      let replace;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        let location = normalizeRedirectLocation(result.response.headers.get(\"Location\"), new URL(request.url), basename);\n        replace = location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(request, result, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n      return {\n        pendingActionResult: [boundaryMatch.route.id, result]\n      };\n    }\n    return {\n      pendingActionResult: [actionMatch.route.id, result]\n    };\n  }\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, fetcherSubmission, replace, initialHydration, flushSync, pendingActionResult) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission);\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, future.v7_partialHydration && initialHydration === true, future.unstable_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult);\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId));\n    pendingNavigationLoadId = ++incrementingLoadId;\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? {\n          [pendingActionResult[0]]: pendingActionResult[1].error\n        } : null\n      }, getActionDataForCommit(pendingActionResult), updatedFetchers ? {\n        fetchers: new Map(state.fetchers)\n      } : {}), {\n        flushSync\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n    if (!isUninterruptedRevalidation && (!future.v7_partialHydration || !initialHydration)) {\n      revalidatingFetchers.forEach(rf => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = getLoadingFetcher(undefined, fetcher ? fetcher.data : undefined);\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData;\n      if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n        // This is cast to `any` currently because `RouteData`uses any and it\n        // would be a breaking change to use any.\n        // TODO: v7 - change `RouteData` to use `unknown` instead of `any`\n        actionData = {\n          [pendingActionResult[0]]: pendingActionResult[1].data\n        };\n      } else if (state.actionData) {\n        if (Object.keys(state.actionData).length === 0) {\n          actionData = null;\n        } else {\n          actionData = state.actionData;\n        }\n      }\n      updateState(_extends({\n        navigation: loadingNavigation\n      }, actionData !== undefined ? {\n        actionData\n      } : {}, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}), {\n        flushSync\n      });\n    }\n    revalidatingFetchers.forEach(rf => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(f => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    let {\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    }\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key));\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect([...loaderResults, ...fetcherResults]);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      await startRedirectNavigation(request, redirect.result, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    // During partial hydration, preserve SSR errors for routes that don't re-run\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      Object.entries(state.errors).filter(_ref2 => {\n        let [id] = _ref2;\n        return !matchesToLoad.some(m => m.route.id === id);\n      }).forEach(_ref3 => {\n        let [routeId, error] = _ref3;\n        errors = Object.assign(errors || {}, {\n          [routeId]: error\n        });\n      });\n    }\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n    return _extends({\n      loaderData,\n      errors\n    }, shouldUpdateFetchers ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, future.v7_relativeSplatPath, routeId, opts == null ? void 0 : opts.relative);\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }), {\n        flushSync\n      });\n      return;\n    }\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);\n    if (error) {\n      setFetcherError(key, routeId, error, {\n        flushSync\n      });\n      return;\n    }\n    let match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, flushSync, submission);\n      return;\n    }\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, flushSync, submission);\n  }\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, flushSync, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId\n      });\n      setFetcherError(key, routeId, error, {\n        flushSync\n      });\n      return;\n    }\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync\n    });\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let actionResults = await callDataStrategy(\"action\", fetchRequest, [match], requestMatches);\n    let actionResult = actionResults[0];\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(fetchRequest, actionResult, {\n            fetcherSubmission: submission\n          });\n        }\n      }\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, false, future.unstable_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, [match.route.id, actionResult]);\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = getLoadingFetcher(undefined, existingFetcher ? existingFetcher.data : undefined);\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      if (fetchControllers.has(staleKey)) {\n        abortFetcher(staleKey);\n      }\n      if (rf.controller) {\n        fetchControllers.set(staleKey, rf.controller);\n      }\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(rf => abortFetcher(rf.key));\n    abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    let {\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n    if (abortController.signal.aborted) {\n      return;\n    }\n    abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect([...loaderResults, ...fetcherResults]);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      return startRedirectNavigation(revalidationRequest, redirect.result);\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n    abortStaleFetchLoads(loadId);\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors),\n        fetchers: new Map(state.fetchers)\n      });\n      isRevalidationRequired = false;\n    }\n  }\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(key, routeId, path, match, matches, flushSync, submission) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined), {\n      flushSync\n    });\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let results = await callDataStrategy(\"loader\", fetchRequest, [match], matches);\n    let result = results[0];\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    }\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(fetchRequest, result);\n        return;\n      }\n    }\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(request, redirect, _temp2) {\n    let {\n      submission,\n      fetcherSubmission,\n      replace\n    } = _temp2 === void 0 ? {} : _temp2;\n    if (redirect.response.headers.has(\"X-Remix-Revalidate\")) {\n      isRevalidationRequired = true;\n    }\n    let location = redirect.response.headers.get(\"Location\");\n    invariant(location, \"Expected a Location header on the redirect Response\");\n    location = normalizeRedirectLocation(location, new URL(request.url), basename);\n    let redirectLocation = createLocation(state.location, location, {\n      _isRedirect: true\n    });\n    if (isBrowser) {\n      let isDocumentReload = false;\n      if (redirect.response.headers.has(\"X-Remix-Reload-Document\")) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(location)) {\n        const url = init.history.createURL(location);\n        isDocumentReload =\n        // Hard reload if it's an absolute URL to a new origin\n        url.origin !== routerWindow.location.origin ||\n        // Hard reload if it's an absolute URL that does not match our basename\n        stripBasename(url.pathname, basename) == null;\n      }\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(location);\n        } else {\n          routerWindow.location.assign(location);\n        }\n        return;\n      }\n    }\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push;\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let {\n      formMethod,\n      formAction,\n      formEncType\n    } = state.navigation;\n    if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (redirectPreserveMethodStatusCodes.has(redirect.response.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, activeSubmission, {\n          formAction: location\n        }),\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(redirectLocation, submission);\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    }\n  }\n  // Utility wrapper for calling dataStrategy client-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(type, request, matchesToLoad, matches) {\n    try {\n      let results = await callDataStrategyImpl(dataStrategyImpl, type, request, matchesToLoad, matches, manifest, mapRouteProperties);\n      return await Promise.all(results.map((result, i) => {\n        if (isRedirectHandlerResult(result)) {\n          let response = result.result;\n          return {\n            type: ResultType.redirect,\n            response: normalizeRelativeRoutingRedirectResponse(response, request, matchesToLoad[i].route.id, matches, basename, future.v7_relativeSplatPath)\n          };\n        }\n        return convertHandlerResultToDataResult(result);\n      }));\n    } catch (e) {\n      // If the outer dataStrategy method throws, just return the error for all\n      // matches - and it'll naturally bubble to the root\n      return matchesToLoad.map(() => ({\n        type: ResultType.error,\n        error: e\n      }));\n    }\n  }\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    let [loaderResults, ...fetcherResults] = await Promise.all([matchesToLoad.length ? callDataStrategy(\"loader\", request, matchesToLoad, matches) : [], ...fetchersToLoad.map(f => {\n      if (f.matches && f.match && f.controller) {\n        let fetcherRequest = createClientSideRequest(init.history, f.path, f.controller.signal);\n        return callDataStrategy(\"loader\", fetcherRequest, [f.match], f.matches).then(r => r[0]);\n      } else {\n        return Promise.resolve({\n          type: ResultType.error,\n          error: getInternalRouterError(404, {\n            pathname: f.path\n          })\n        });\n      }\n    })]);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(() => request.signal), false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(f => f.match), fetcherResults, fetchersToLoad.map(f => f.controller ? f.controller.signal : null), true)]);\n    return {\n      loaderResults,\n      fetcherResults\n    };\n  }\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n  function updateFetcherState(key, fetcher, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function setFetcherError(key, routeId, error, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function getFetcher(key) {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n  function deleteFetcher(key) {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    state.fetchers.delete(key);\n  }\n  function deleteFetcherAndUpdateState(key) {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n    return blocker;\n  }\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({\n      blockers\n    });\n  }\n  function shouldBlockNavigation(_ref4) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref4;\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function getScrollKey(location, matches) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(location, matches.map(m => convertRouteMatchToUiMatch(m, state.loaderData)));\n      return key || location.key;\n    }\n    return location.key;\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let manifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties;\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future = _extends({\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false\n  }, opts ? opts.future : null);\n  let dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   *\n   * - `opts.requestContext` is an optional server context that will be passed\n   *   to actions/loaders in the `context` parameter\n   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent\n   *   the bubbling of errors which allows single-fetch-type implementations\n   *   where the client will handle the bubbling and we may need to return data\n   *   for the handling route\n   */\n  async function query(request, _temp3) {\n    let {\n      requestContext,\n      skipLoaderErrorBubbling,\n      unstable_dataStrategy\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let result = await queryImpl(request, location, matches, requestContext, unstable_dataStrategy || null, skipLoaderErrorBubbling === true, null);\n    if (isResponse(result)) {\n      return result;\n    }\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   *\n   * - `opts.routeId` allows you to specify the specific route handler to call.\n   *   If not provided the handler will determine the proper route by matching\n   *   against `request.url`\n   * - `opts.requestContext` is an optional server context that will be passed\n   *    to actions/loaders in the `context` parameter\n   */\n  async function queryRoute(request, _temp4) {\n    let {\n      routeId,\n      requestContext,\n      unstable_dataStrategy\n    } = _temp4 === void 0 ? {} : _temp4;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let result = await queryImpl(request, location, matches, requestContext, unstable_dataStrategy || null, false, match);\n    if (isResponse(result)) {\n      return result;\n    }\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n    if (result.loaderData) {\n      var _result$activeDeferre;\n      let data = Object.values(result.loaderData)[0];\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n    return undefined;\n  }\n  async function queryImpl(request, location, matches, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, routeMatch != null);\n        return result;\n      }\n      let result = await loadRouteData(request, matches, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction for a\n      // `queryRoute` call, we throw the `HandlerResult` to bail out early\n      // and then return or throw the raw Response here accordingly\n      if (isHandlerResult(e) && isResponse(e.result)) {\n        if (e.type === ResultType.error) {\n          throw e.result;\n        }\n        return e.result;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n  async function submit(request, matches, actionMatch, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, isRouteRequest) {\n    let result;\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      let results = await callDataStrategy(\"action\", request, [actionMatch], matches, isRouteRequest, requestContext, unstable_dataStrategy);\n      result = results[0];\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.response.status,\n        headers: {\n          Location: result.response.headers.get(\"Location\")\n        }\n      });\n    }\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = skipLoaderErrorBubbling ? actionMatch : findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(loaderRequest, matches, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, null, [boundaryMatch.route.id, result]);\n      // action status codes take precedence over loader status codes\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : result.statusCode != null ? result.statusCode : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    }\n    let context = await loadRouteData(loaderRequest, matches, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, null);\n    return _extends({}, context, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      }\n    }, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionHeaders: result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {}\n    });\n  }\n  async function loadRouteData(request, matches, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, routeMatch, pendingActionResult) {\n    let isRouteRequest = routeMatch != null;\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n    let requestMatches = routeMatch ? [routeMatch] : pendingActionResult && isErrorResult(pendingActionResult[1]) ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0]) : matches;\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy);\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? {\n          [pendingActionResult[0]]: pendingActionResult[1].error\n        } : null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let results = await callDataStrategy(\"loader\", request, matchesToLoad, matches, isRouteRequest, requestContext, unstable_dataStrategy);\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n    // Process and commit output from loaders\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling);\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n  // Utility wrapper for calling dataStrategy server-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(type, request, matchesToLoad, matches, isRouteRequest, requestContext, unstable_dataStrategy) {\n    let results = await callDataStrategyImpl(unstable_dataStrategy || defaultDataStrategy, type, request, matchesToLoad, matches, manifest, mapRouteProperties, requestContext);\n    return await Promise.all(results.map((result, i) => {\n      if (isRedirectHandlerResult(result)) {\n        let response = result.result;\n        // Throw redirects and let the server handle them with an HTTP redirect\n        throw normalizeRelativeRoutingRedirectResponse(response, request, matchesToLoad[i].route.id, matches, basename, future.v7_relativeSplatPath);\n      }\n      if (isResponse(result.result) && isRouteRequest) {\n        // For SSR single-route requests, we want to hand Responses back\n        // directly without unwrapping\n        throw result;\n      }\n      return convertHandlerResultToDataResult(result);\n    }));\n  }\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n  return newContext;\n}\nfunction throwStaticHandlerAbortedError(request, isRouteRequest, future) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && (\"formData\" in opts && opts.formData != null || \"body\" in opts && opts.body !== undefined);\n}\nfunction normalizeTo(location, matches, basename, prependBasename, to, v7_relativeSplatPath, fromRouteId, relative) {\n  let contextualMatches;\n  let activeRouteMatch;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n  // Resolve the relative path\n  let path = resolveTo(to ? to : \".\", getResolveToMatches(contextualMatches, v7_relativeSplatPath), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\");\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n  // Add an ?index param for matched index routes if we don't already have one\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search)) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  }\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  }\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, {\n      type: \"invalid-body\"\n    })\n  });\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();\n  let formAction = stripHashFromPath(path);\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      let text = typeof opts.body === \"string\" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ?\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n      Array.from(opts.body.entries()).reduce((acc, _ref5) => {\n        let [name, value] = _ref5;\n        return \"\" + acc + name + \"=\" + value + \"\\n\";\n      }, \"\") : String(opts.body);\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text\n        }\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      try {\n        let json = typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined\n          }\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n  invariant(typeof FormData === \"function\", \"FormData is not available in this environment\");\n  let searchParams;\n  let formData;\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n  let submission = {\n    formMethod,\n    formAction,\n    formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined\n  };\n  if (isMutationMethod(submission.formMethod)) {\n    return {\n      path,\n      submission\n    };\n  }\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n}\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\nfunction getMatchesToLoad(history, state, matches, submission, location, isInitialLoad, skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult) {\n  let actionResult = pendingActionResult ? isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : pendingActionResult[1].data : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingActionResult && isErrorResult(pendingActionResult[1]) ? pendingActionResult[0] : undefined;\n  let boundaryMatches = boundaryId ? getLoaderMatchesUntilBoundary(matches, boundaryId) : matches;\n  // Don't revalidate loaders by default after action 4xx/5xx responses\n  // when the flag is enabled.  They can still opt-into revalidation via\n  // `shouldRevalidate` via `actionResult`\n  let actionStatus = pendingActionResult ? pendingActionResult[1].statusCode : undefined;\n  let shouldSkipRevalidation = skipActionErrorRevalidation && actionStatus && actionStatus >= 400;\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let {\n      route\n    } = match;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (route.loader == null) {\n      return false;\n    }\n    if (isInitialLoad) {\n      if (typeof route.loader !== \"function\" || route.loader.hydrate) {\n        return true;\n      }\n      return state.loaderData[route.id] === undefined && (\n      // Don't re-run if the loader ran and threw an error\n      !state.errors || state.errors[route.id] === undefined);\n    }\n    // Always call the loader on new route instances and pending defer cancellations\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    }\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      unstable_actionStatus: actionStatus,\n      defaultShouldRevalidate: shouldSkipRevalidation ? false :\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired || currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search ||\n      // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  });\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial load (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (isInitialLoad || !matches.some(m => m.route.id === f.routeId) || deletedFetchers.has(key)) {\n      return;\n    }\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    }\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.includes(key)) {\n      // Always revalidate if the fetcher was cancelled\n      shouldRevalidate = true;\n    } else if (fetcher && fetcher.state !== \"idle\" && fetcher.data === undefined) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params\n      }, submission, {\n        actionResult,\n        unstable_actionStatus: actionStatus,\n        defaultShouldRevalidate: shouldSkipRevalidation ? false : isRevalidationRequired\n      }));\n    }\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id;\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return arg.defaultShouldRevalidate;\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(route, mapRouteProperties, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n  let lazyRoute = await route.lazy();\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined &&\n    // This property isn't static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== \"hasErrorBoundary\";\n    warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  }\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n    lazy: undefined\n  }));\n}\n// Default implementation of `dataStrategy` which fetches all loaders in parallel\nfunction defaultDataStrategy(opts) {\n  return Promise.all(opts.matches.map(m => m.resolve()));\n}\nasync function callDataStrategyImpl(dataStrategyImpl, type, request, matchesToLoad, matches, manifest, mapRouteProperties, requestContext) {\n  let routeIdsToLoad = matchesToLoad.reduce((acc, m) => acc.add(m.route.id), new Set());\n  let loadedMatches = new Set();\n  // Send all matches here to allow for a middleware-type implementation.\n  // handler will be a no-op for unneeded routes and we filter those results\n  // back out below.\n  let results = await dataStrategyImpl({\n    matches: matches.map(match => {\n      let shouldLoad = routeIdsToLoad.has(match.route.id);\n      // `resolve` encapsulates the route.lazy, executing the\n      // loader/action, and mapping return values/thrown errors to a\n      // HandlerResult.  Users can pass a callback to take fine-grained control\n      // over the execution of the loader/action\n      let resolve = handlerOverride => {\n        loadedMatches.add(match.route.id);\n        return shouldLoad ? callLoaderOrAction(type, request, match, manifest, mapRouteProperties, handlerOverride, requestContext) : Promise.resolve({\n          type: ResultType.data,\n          result: undefined\n        });\n      };\n      return _extends({}, match, {\n        shouldLoad,\n        resolve\n      });\n    }),\n    request,\n    params: matches[0].params,\n    context: requestContext\n  });\n  // Throw if any loadRoute implementations not called since they are what\n  // ensures a route is fully loaded\n  matches.forEach(m => invariant(loadedMatches.has(m.route.id), \"`match.resolve()` was not called for route id \\\"\" + m.route.id + \"\\\". \" + \"You must call `match.resolve()` on every match passed to \" + \"`dataStrategy` to ensure all routes are properly loaded.\"));\n  // Filter out any middleware-only matches for which we didn't need to run handlers\n  return results.filter((_, i) => routeIdsToLoad.has(matches[i].route.id));\n}\n// Default logic for calling a loader/action is the user has no specified a dataStrategy\nasync function callLoaderOrAction(type, request, match, manifest, mapRouteProperties, handlerOverride, staticContext) {\n  let result;\n  let onReject;\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject;\n    // This will never resolve so safe to type it as Promise<HandlerResult> to\n    // satisfy the function return value\n    let abortPromise = new Promise((_, r) => reject = r);\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    let actualHandler = ctx => {\n      if (typeof handler !== \"function\") {\n        return Promise.reject(new Error(\"You cannot call the handler for a route which defines a boolean \" + (\"\\\"\" + type + \"\\\" [routeId: \" + match.route.id + \"]\")));\n      }\n      return handler({\n        request,\n        params: match.params,\n        context: staticContext\n      }, ...(ctx !== undefined ? [ctx] : []));\n    };\n    let handlerPromise;\n    if (handlerOverride) {\n      handlerPromise = handlerOverride(ctx => actualHandler(ctx));\n    } else {\n      handlerPromise = (async () => {\n        try {\n          let val = await actualHandler();\n          return {\n            type: \"data\",\n            result: val\n          };\n        } catch (e) {\n          return {\n            type: \"error\",\n            result: e\n          };\n        }\n      })();\n    }\n    return Promise.race([handlerPromise, abortPromise]);\n  };\n  try {\n    let handler = match.route[type];\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let [value] = await Promise.all([\n        // If the handler throws, don't let it immediately bubble out,\n        // since we need to let the lazy() execution finish so we know if this\n        // route has a boundary that can handle the error\n        runHandler(handler).catch(e => {\n          handlerError = e;\n        }), loadLazyRouteModule(match.route, mapRouteProperties, manifest)]);\n        if (handlerError !== undefined) {\n          throw handlerError;\n        }\n        result = value;\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n        handler = match.route[type];\n        if (handler) {\n          // Handler still runs even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            result: undefined\n          };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n    invariant(result.result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    // We should already be catching and converting normal handler executions to\n    // HandlerResults and returning them, so anything that throws here is an\n    // unexpected error we still need to wrap\n    return {\n      type: ResultType.error,\n      result: e\n    };\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n  return result;\n}\nasync function convertHandlerResultToDataResult(handlerResult) {\n  let {\n    result,\n    type,\n    status\n  } = handlerResult;\n  if (isResponse(result)) {\n    let data;\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n    if (type === ResultType.error) {\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(result.status, result.statusText, data),\n        statusCode: result.status,\n        headers: result.headers\n      };\n    }\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n  if (type === ResultType.error) {\n    return {\n      type: ResultType.error,\n      error: result,\n      statusCode: isRouteErrorResponse(result) ? result.status : status\n    };\n  }\n  if (isDeferredData(result)) {\n    var _result$init, _result$init2;\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n      headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)\n    };\n  }\n  return {\n    type: ResultType.data,\n    data: result,\n    statusCode: status\n  };\n}\n// Support relative routing in internal redirects\nfunction normalizeRelativeRoutingRedirectResponse(response, request, routeId, matches, basename, v7_relativeSplatPath) {\n  let location = response.headers.get(\"Location\");\n  invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n  if (!ABSOLUTE_URL_REGEX.test(location)) {\n    let trimmedMatches = matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1);\n    location = normalizeTo(new URL(request.url), trimmedMatches, basename, true, location, v7_relativeSplatPath);\n    response.headers.set(\"Location\", location);\n  }\n  return response;\n}\nfunction normalizeRedirectLocation(location, currentUrl, basename) {\n  if (ABSOLUTE_URL_REGEX.test(location)) {\n    // Strip off the protocol+origin for same-origin + same-basename absolute redirects\n    let normalizedLocation = location;\n    let url = normalizedLocation.startsWith(\"//\") ? new URL(currentUrl.protocol + normalizedLocation) : new URL(normalizedLocation);\n    let isSameBasename = stripBasename(url.pathname, basename) != null;\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n  return location;\n}\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType\n    } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({\n        \"Content-Type\": formEncType\n      });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (formEncType === \"application/x-www-form-urlencoded\" && submission.formData) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n  return searchParams;\n}\nfunction convertSearchParamsToFormData(searchParams) {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {};\n  let pendingError = pendingActionResult && isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : undefined;\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError !== undefined) {\n        error = pendingError;\n        pendingError = undefined;\n      }\n      errors = errors || {};\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        // Look upwards from the matched route for the closest ancestor error\n        // boundary, defaulting to the root match.  Prefer higher error values\n        // if lower errors bubble to the same boundary\n        let boundaryMatch = findNearestBoundary(matches, id);\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      }\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      } else {\n        loaderData[id] = result.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      }\n    }\n  });\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError !== undefined && pendingActionResult) {\n    errors = {\n      [pendingActionResult[0]]: pendingError\n    };\n    loaderData[pendingActionResult[0]] = undefined;\n  }\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingActionResult, activeDeferreds, false // This method is only called client side so we always want to bubble\n  );\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      match,\n      controller\n    } = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index];\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  return {\n    loaderData,\n    errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\nfunction getActionDataForCommit(pendingActionResult) {\n  if (!pendingActionResult) {\n    return {};\n  }\n  return isErrorResult(pendingActionResult[1]) ? {\n    // Clear out prior actionData on errors\n    actionData: {}\n  } : {\n    actionData: {\n      [pendingActionResult[0]]: pendingActionResult[1].data\n    }\n  };\n}\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.length === 1 ? routes[0] : routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\nfunction getInternalRouterError(status, _temp5) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type\n  } = _temp5 === void 0 ? {} : _temp5;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n  return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);\n}\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return {\n        result,\n        idx: i\n      };\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\nfunction isHandlerResult(result) {\n  return result != null && typeof result === \"object\" && \"type\" in result && \"result\" in result && (result.type === ResultType.data || result.type === ResultType.error);\n}\nfunction isRedirectHandlerResult(result) {\n  return isResponse(result.result) && redirectStatusCodes.has(result.result.status);\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(signal, \"Expected an AbortSignal for revalidating fetcher deferred result\");\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n}\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\nfunction getSubmissionFromNavigation(navigation) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    text,\n    formData,\n    json\n  } = navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined\n    };\n  }\n}\nfunction getLoadingNavigation(location, submission) {\n  if (submission) {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text\n    };\n    return navigation;\n  } else {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined\n    };\n    return navigation;\n  }\n}\nfunction getSubmittingNavigation(location, submission) {\n  let navigation = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text\n  };\n  return navigation;\n}\nfunction getLoadingFetcher(submission, data) {\n  if (submission) {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data\n    };\n    return fetcher;\n  } else {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data\n    };\n    return fetcher;\n  }\n}\nfunction getSubmittingFetcher(submission, existingFetcher) {\n  let fetcher = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined\n  };\n  return fetcher;\n}\nfunction getDoneFetcher(data) {\n  let fetcher = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data\n  };\n  return fetcher;\n}\nfunction restoreAppliedTransitions(_window, transitions) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\nfunction persistAppliedTransitions(_window, transitions) {\n  if (transitions.size > 0) {\n    let json = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY, JSON.stringify(json));\n    } catch (error) {\n      warning(false, \"Failed to save applied view transitions in sessionStorage (\" + error + \").\");\n    }\n  }\n}\n//#endregion\n\nexport { AbortedDeferredError, Action, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, ErrorResponseImpl as UNSAFE_ErrorResponseImpl, convertRouteMatchToUiMatch as UNSAFE_convertRouteMatchToUiMatch, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getResolveToMatches as UNSAFE_getResolveToMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, redirectDocument, resolvePath, resolveTo, stripBasename };\n//# sourceMappingURL=router.js.map\n"],"names":["_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","Action","PopStateEventType","createBrowserHistory","options","getLocation","createHref","validateLocation","window","document","defaultView","v5Compat","globalHistory","history","action","Pop","listener","index","getIndex","state","idx","handlePop","nextIndex","delta","location","createURL","to","base","origin","href","createPath","replace","invariant","URL","replaceState","listen","fn","Error","addEventListener","removeEventListener","encodeLocation","url","pathname","search","hash","push","Push","createLocation","historyState","getHistoryState","pushState","error","DOMException","name","Replace","go","n","getUrlBasedHistory","usr","value","message","warning","cond","console","warn","e","current","parsePath","Math","random","toString","substr","_ref","charAt","path","parsedPath","hashIndex","indexOf","searchIndex","ResultType","immutableRouteKeys","Set","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","map","route","treePath","id","join","children","isIndexRoute","indexRoute","pathOrLayoutRoute","undefined","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","sort","a","b","score","slice","every","compareIndexes","routesMeta","meta","childrenIndex","rankRouteBranches","matches","decoded","decodePath","matchRouteBranch","parentsMeta","flattenRoute","relativePath","caseSensitive","startsWith","joinPaths","concat","computeScore","forEach","_route$path","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","params","pathnameBase","normalizePathname","pattern","matcher","compiledParams","regexpSource","_","paramName","RegExp","compilePath","captureGroups","memo","splatValue","v","decodeURIComponent","toLowerCase","startIndex","nextChar","getInvalidPathError","char","field","dest","JSON","stringify","getPathContributingMatches","paths","normalizeSearch","normalizeHash","AbortedDeferredError","ErrorResponseImpl","constructor","status","statusText","data","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","json","text","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","defaultMapRouteProperties","hasErrorBoundary","Boolean","TRANSITIONS_STORAGE_KEY","createRouter","init","routerWindow","isBrowser","createElement","isServer","detectErrorBoundary","inFlightDataRoutes","initialized","dataRoutes","dataStrategyImpl","unstable_dataStrategy","defaultDataStrategy","future","v7_fetcherPersist","v7_normalizeFormMethod","v7_partialHydration","v7_prependBasename","v7_relativeSplatPath","unstable_skipActionErrorRevalidation","unlistenHistory","subscribers","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","router","hasLazyRoutes","m","lazy","hasLoaders","loader","loaderData","errors","isRouteInitialized","hydrate","findIndex","pendingNavigationController","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","actionData","fetchers","Map","blockers","pendingAction","pendingPreventScrollReset","pendingViewTransitionEnabled","appliedViewTransitions","removePageHideEventListener","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeFetchers","deletedFetchers","activeDeferreds","blockerFunctions","ignoreNextHistoryUpdate","updateState","newState","opts","completedFetchers","deletedFetchersKeys","fetcher","has","subscriber","unstable_viewTransitionOpts","viewTransitionOpts","unstable_flushSync","flushSync","delete","deleteFetcher","completeNavigation","_temp","_location$state","_location$state2","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","size","k","set","priorPaths","get","currentLocation","nextLocation","toPaths","add","getSavedScrollPosition","async","startNavigation","abort","startUninterruptedRevalidation","getScrollKey","saveScrollPosition","enableViewTransition","routesToUse","loadingNavigation","overrideNavigation","notFoundMatches","cancelActiveDeferreds","submission","AbortController","pendingActionResult","request","createClientSideRequest","signal","pendingError","findNearestBoundary","type","actionResult","interruptActiveLoads","getSubmittingNavigation","actionMatch","getTargetMatch","callDataStrategy","aborted","shortCircuited","method","routeId","isRedirectResult","normalizeRedirectLocation","response","headers","startRedirectNavigation","isDeferredResult","isErrorResult","boundaryMatch","handleAction","getLoadingNavigation","fetcherSubmission","initialHydration","activeSubmission","getSubmissionFromNavigation","matchesToLoad","revalidatingFetchers","getMatchesToLoad","updatedFetchers","markFetchRedirectsDone","getActionDataForCommit","rf","revalidatingFetcher","getLoadingFetcher","abortFetcher","controller","abortPendingFetchRevalidations","f","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","redirect","findRedirect","fetcherKey","processLoaderData","deferredData","subscribe","done","entries","_ref2","_ref3","didAbortFetchLoads","abortStaleFetchLoads","shouldUpdateFetchers","handleLoaders","_temp2","redirectLocation","isDocumentReload","redirectHistoryAction","results","requestContext","routeIdsToLoad","acc","loadedMatches","shouldLoad","resolve","handlerOverride","staticContext","onReject","runHandler","handler","reject","abortPromise","Promise","r","handlerPromise","actualHandler","ctx","context","race","handlerError","all","catch","loadLazyRouteModule","callLoaderOrAction","callDataStrategyImpl","isResponse","isRedirectHandlerResult","normalizeRelativeRoutingRedirectResponse","handlerResult","contentType","body","statusCode","deferred","cancel","resolveData","isDeferredData","_result$init","_result$init2","Headers","convertHandlerResultToDataResult","currentMatches","fetchersToLoad","then","resolveDeferredResults","updateFetcherState","setFetcherError","getFetcher","markFetchersDone","doneFetcher","getDoneFetcher","doneKeys","landedId","yeetedKeys","deleteBlocker","updateBlocker","newBlocker","blocker","shouldBlockNavigation","_ref4","Array","from","blockerKey","blockerFunction","predicate","cancelledRouteIds","dfd","handle","convertRouteMatchToUiMatch","y","initialize","_window","transitions","sessionPositions","sessionStorage","getItem","parse","isArray","restoreAppliedTransitions","_saveAppliedTransitions","setItem","persistAppliedTransitions","enableScrollRestoration","positions","getPosition","getKey","navigate","normalizedPath","normalizeTo","fromRouteId","relative","normalizeNavigateOptions","userReplace","unstable_viewTransition","fetch","requestMatches","existingFetcher","getSubmittingFetcher","abortController","fetchRequest","originatingLoadId","revalidationRequest","loadId","loadFetcher","staleKey","handleFetcherAction","resolveDeferredData","handleFetcherLoader","revalidate","count","dispose","clear","getBlocker","_internalFetchControllers","_internalActiveDeferreds","_internalSetRoutes","newRoutes","prependBasename","contextualMatches","activeRouteMatch","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","toPathname","routePathnameIndex","toSegments","shift","fromPathname","pop","resolvePathname","resolvePath","hasExplicitTrailingSlash","hasCurrentTrailingSlash","resolveTo","pathMatches","getResolveToMatches","hasNakedIndexQuery","normalizeFormMethod","isFetcher","isSubmissionNavigation","searchParams","getInvalidBodyError","rawFormMethod","toUpperCase","stripHashFromPath","FormData","URLSearchParams","_ref5","String","convertFormDataToSearchParams","convertSearchParamsToFormData","append","isInitialLoad","skipActionErrorRevalidation","currentUrl","nextUrl","boundaryId","boundaryMatches","getLoaderMatchesUntilBoundary","actionStatus","shouldSkipRevalidation","navigationMatches","currentLoaderData","currentMatch","isNew","isMissingData","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","unstable_actionStatus","defaultShouldRevalidate","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","currentPath","loaderMatch","arg","routeChoice","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","isPropertyStaticallyDefined","trimmedMatches","normalizedLocation","protocol","isSameBasename","Request","skipLoaderErrorBubbling","foundError","loaderHeaders","processRouteLoaderData","newLoaderData","mergedLoaderData","reverse","find","_temp5","errorMessage","signals","isRevalidatingLoader","unwrap","unwrappedData","getAll","Symbol"],"sourceRoot":""}