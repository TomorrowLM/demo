{"version":3,"file":"vendors-node_modules_theia_navigator_lib_electron-browser_electron-navigator-module_js.js","mappings":"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","sources":["webpack:///../../node_modules/@theia/core/src/electron-common/electron-api.ts?","webpack:///../../node_modules/@theia/navigator/src/browser/index.ts?","webpack:///../../node_modules/@theia/navigator/src/electron-browser/electron-navigator-menu-contribution.ts?","webpack:///../../node_modules/@theia/navigator/src/electron-browser/electron-navigator-module.ts?"],"sourcesContent":["// *****************************************************************************\n// Copyright (C) 2023 STMicroelectronics and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { NativeKeyboardLayout } from '../common/keyboard/keyboard-layout-provider';\nimport { Disposable } from '../common';\nimport { FrontendApplicationState, StopReason } from '../common/frontend-application-state';\n\nexport type MenuRole = ('undo' | 'redo' | 'cut' | 'copy' | 'paste' | 'selectAll' | 'about' | 'services' | 'hide' | 'hideOthers' | 'unhide' | 'quit');\n\nexport interface MenuDto {\n    id?: string,\n    label?: string,\n    submenu?: MenuDto[],\n    type?: ('normal' | 'separator' | 'submenu' | 'checkbox' | 'radio');\n    checked?: boolean,\n    enabled?: boolean,\n    visible?: boolean;\n    role?: MenuRole;\n    accelerator?: string,\n    execute?: () => void\n}\n\nexport type InternalMenuDto = Omit<MenuDto, 'execute' | 'submenu'> & {\n    submenu?: InternalMenuDto[],\n    handlerId?: number\n};\n\nexport type WindowEvent = 'maximize' | 'unmaximize' | 'focus';\n\nexport interface TheiaCoreAPI {\n    getSecurityToken: () => Promise<string>;\n    attachSecurityToken: (endpoint: string) => Promise<void>;\n\n    setMenuBarVisible(visible: boolean, windowName?: string): void;\n    setMenu(menu: MenuDto[] | undefined): void;\n\n    popup(menu: MenuDto[], x: number, y: number, onClosed: () => void): Promise<number>;\n    closePopup(handle: number): void;\n\n    focusWindow(name: string): void;\n\n    showItemInFolder(fsPath: string): void;\n\n    getTitleBarStyleAtStartup(): Promise<string>;\n    setTitleBarStyle(style: string): void;\n    minimize(): void;\n    isMaximized(): boolean; // TODO: this should really be async, since it blocks the renderer process\n    maximize(): void;\n    unMaximize(): void;\n    close(): void;\n    onWindowEvent(event: WindowEvent, handler: () => void): Disposable;\n    setCloseRequestHandler(handler: (reason: StopReason) => Promise<boolean>): void;\n\n    toggleDevTools(): void;\n    getZoomLevel(): Promise<number>;\n    setZoomLevel(desired: number): void;\n\n    isFullScreenable(): boolean; // TODO: this should really be async, since it blocks the renderer process\n    isFullScreen(): boolean; // TODO: this should really be async, since it blocks the renderer process\n    toggleFullScreen(): void;\n\n    requestReload(): void;\n    restart(): void;\n\n    applicationStateChanged(state: FrontendApplicationState): void;\n\n    readClipboard(): string;\n    writeClipboard(text: string): void;\n\n    onKeyboardLayoutChanged(handler: (newLayout: NativeKeyboardLayout) => void): Disposable;\n\n    sendData(data: Uint8Array): void;\n    onData(handler: (data: Uint8Array) => void): Disposable;\n}\n\ndeclare global {\n    interface Window {\n        electronTheiaCore: TheiaCoreAPI\n    }\n}\n\nexport const CHANNEL_SET_MENU = 'SetMenu';\nexport const CHANNEL_SET_MENU_BAR_VISIBLE = 'SetMenuBarVisible';\nexport const CHANNEL_INVOKE_MENU = 'InvokeMenu';\nexport const CHANNEL_OPEN_POPUP = 'OpenPopup';\nexport const CHANNEL_ON_CLOSE_POPUP = 'OnClosePopup';\nexport const CHANNEL_CLOSE_POPUP = 'ClosePopup';\nexport const CHANNEL_GET_SECURITY_TOKEN = 'GetSecurityToken';\nexport const CHANNEL_FOCUS_WINDOW = 'FocusWindow';\nexport const CHANNEL_SHOW_OPEN = 'ShowOpenDialog';\nexport const CHANNEL_SHOW_SAVE = 'ShowSaveDialog';\nexport const CHANNEL_SHOW_ITEM_IN_FOLDER = 'ShowItemInFolder';\nexport const CHANNEL_ATTACH_SECURITY_TOKEN = 'AttachSecurityToken';\n\nexport const CHANNEL_GET_TITLE_STYLE_AT_STARTUP = 'GetTitleStyleAtStartup';\nexport const CHANNEL_SET_TITLE_STYLE = 'SetTitleStyle';\nexport const CHANNEL_CLOSE = 'Close';\nexport const CHANNEL_MINIMIZE = 'Minimize';\nexport const CHANNEL_MAXIMIZE = 'Maximize';\nexport const CHANNEL_IS_MAXIMIZED = 'IsMaximized';\n\nexport const CHANNEL_UNMAXIMIZE = 'UnMaximize';\nexport const CHANNEL_ON_WINDOW_EVENT = 'OnWindowEvent';\nexport const CHANNEL_TOGGLE_DEVTOOLS = 'ToggleDevtools';\nexport const CHANNEL_GET_ZOOM_LEVEL = 'GetZoomLevel';\nexport const CHANNEL_SET_ZOOM_LEVEL = 'SetZoomLevel';\nexport const CHANNEL_IS_FULL_SCREENABLE = 'IsFullScreenable';\nexport const CHANNEL_IS_FULL_SCREEN = 'IsFullScreen';\nexport const CHANNEL_TOGGLE_FULL_SCREEN = 'ToggleFullScreen';\n\nexport const CHANNEL_REQUEST_CLOSE = 'RequestClose';\nexport const CHANNEL_REQUEST_RELOAD = 'RequestReload';\nexport const CHANNEL_RESTART = 'Restart';\n\nexport const CHANNEL_APP_STATE_CHANGED = 'ApplicationStateChanged';\n\nexport const CHANNEL_READ_CLIPBOARD = 'ReadClipboard';\nexport const CHANNEL_WRITE_CLIPBOARD = 'WriteClipboard';\n\nexport const CHANNEL_KEYBOARD_LAYOUT_CHANGED = 'KeyboardLayoutChanged';\nexport const CHANNEL_IPC_CONNECTION = 'IpcConnection';\n","// *****************************************************************************\n// Copyright (C) 2018 TypeFox and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n// *****************************************************************************\n\nexport * from './navigator-model';\nexport * from './navigator-widget';\nexport * from './navigator-widget-factory';\nexport * from './navigator-decorator-service';\n","// *****************************************************************************\n// Copyright (C) 2021 EclipseSource and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { Command, CommandContribution, CommandRegistry, MenuContribution, MenuModelRegistry, SelectionService } from '@theia/core';\nimport { CommonCommands, KeybindingContribution, KeybindingRegistry } from '@theia/core/lib/browser';\nimport { WidgetManager } from '@theia/core/lib/browser/widget-manager';\nimport { inject, injectable } from '@theia/core/shared/inversify';\nimport { FileStatNode } from '@theia/filesystem/lib/browser';\nimport { FileNavigatorWidget, FILE_NAVIGATOR_ID } from '../browser';\nimport { NavigatorContextMenu, SHELL_TABBAR_CONTEXT_REVEAL } from '../browser/navigator-contribution';\nimport { isWindows, isOSX } from '@theia/core/lib/common/os';\nimport { WorkspaceService } from '@theia/workspace/lib/browser';\nimport { UriAwareCommandHandler } from '@theia/core/lib/common/uri-command-handler';\nimport '@theia/core/lib/electron-common/electron-api';\n\nexport const OPEN_CONTAINING_FOLDER = Command.toDefaultLocalizedCommand({\n    id: 'revealFileInOS',\n    category: CommonCommands.FILE_CATEGORY,\n    label: isWindows ? 'Reveal in File Explorer' :\n        isOSX ? 'Reveal in Finder' :\n        /* linux */ 'Open Containing Folder'\n});\n\n@injectable()\nexport class ElectronNavigatorMenuContribution implements MenuContribution, CommandContribution, KeybindingContribution {\n\n    @inject(SelectionService)\n    protected readonly selectionService: SelectionService;\n\n    @inject(WidgetManager)\n    protected readonly widgetManager: WidgetManager;\n\n    @inject(WorkspaceService)\n    protected readonly workspaceService: WorkspaceService;\n\n    registerCommands(commands: CommandRegistry): void {\n        commands.registerCommand(OPEN_CONTAINING_FOLDER, UriAwareCommandHandler.MonoSelect(this.selectionService, {\n            execute: async uri => {\n                window.electronTheiaCore.showItemInFolder(uri['codeUri'].fsPath);\n            },\n            isEnabled: uri => !!this.workspaceService.getWorkspaceRootUri(uri),\n            isVisible: uri => !!this.workspaceService.getWorkspaceRootUri(uri),\n        }));\n    }\n\n    registerMenus(menus: MenuModelRegistry): void {\n        menus.registerMenuAction(NavigatorContextMenu.NAVIGATION, {\n            commandId: OPEN_CONTAINING_FOLDER.id,\n            label: OPEN_CONTAINING_FOLDER.label\n        });\n        menus.registerMenuAction(SHELL_TABBAR_CONTEXT_REVEAL, {\n            commandId: OPEN_CONTAINING_FOLDER.id,\n            label: OPEN_CONTAINING_FOLDER.label,\n            order: '4'\n        });\n    }\n\n    registerKeybindings(keybindings: KeybindingRegistry): void {\n        keybindings.registerKeybinding({\n            command: OPEN_CONTAINING_FOLDER.id,\n            keybinding: 'ctrlcmd+alt+p',\n            when: 'filesExplorerFocus'\n        });\n    }\n\n    protected getSelectedFileStatNodes(): FileStatNode[] {\n        const navigator = this.tryGetNavigatorWidget();\n        return navigator ? navigator.model.selectedNodes.filter(FileStatNode.is) : [];\n    }\n\n    tryGetNavigatorWidget(): FileNavigatorWidget | undefined {\n        return this.widgetManager.tryGetWidget(FILE_NAVIGATOR_ID);\n    }\n\n}\n","// *****************************************************************************\n// Copyright (C) 2021 EclipseSource and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { CommandContribution, MenuContribution } from '@theia/core';\nimport { ContainerModule } from '@theia/core/shared/inversify';\nimport { KeybindingContribution } from '@theia/core/lib/browser';\nimport { ElectronNavigatorMenuContribution } from './electron-navigator-menu-contribution';\n\nexport default new ContainerModule(bind => {\n    bind(MenuContribution).to(ElectronNavigatorMenuContribution).inSingletonScope();\n    bind(CommandContribution).to(ElectronNavigatorMenuContribution).inSingletonScope();\n    bind(KeybindingContribution).to(ElectronNavigatorMenuContribution).inSingletonScope();\n});\n"],"names":[],"sourceRoot":""}