"use strict";
(self["webpackChunkelectron_app"] = self["webpackChunkelectron_app"] || []).push([["vendors-node_modules_theia_core_lib_electron-browser_window_electron-window-module_js"],{

/***/ "../../node_modules/@theia/core/lib/browser/window/default-secondary-window-service.js":
/*!*********************************************************************************************!*\
  !*** ../../node_modules/@theia/core/lib/browser/window/default-secondary-window-service.js ***!
  \*********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var DefaultSecondaryWindowService_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DefaultSecondaryWindowService = void 0;
// *****************************************************************************
// Copyright (C) 2022 STMicroelectronics, Ericsson, ARM, EclipseSource and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
// *****************************************************************************
const inversify_1 = __webpack_require__(/*! inversify */ "../../node_modules/inversify/lib/inversify.js");
const window_service_1 = __webpack_require__(/*! ./window-service */ "../../node_modules/@theia/core/lib/browser/window/window-service.js");
let DefaultSecondaryWindowService = DefaultSecondaryWindowService_1 = class DefaultSecondaryWindowService {
    constructor() {
        /**
         * Randomized prefix to be included in opened windows' ids.
         * This avoids conflicts when creating sub-windows from multiple theia instances (e.g. by opening Theia multiple times in the same browser)
         */
        this.prefix = crypto.getRandomValues(new Uint32Array(1))[0];
        /** Unique id. Increase after every access. */
        this.nextId = 0;
        this.secondaryWindows = [];
    }
    init() {
        // Close all open windows when the main window is closed.
        this.windowService.onUnload(() => {
            // Iterate backwards because calling window.close might remove the window from the array
            for (let i = this.secondaryWindows.length - 1; i >= 0; i--) {
                this.secondaryWindows[i].close();
            }
        });
    }
    createSecondaryWindow(onClose) {
        const win = this.doCreateSecondaryWindow(onClose);
        if (win) {
            this.secondaryWindows.push(win);
        }
        return win;
    }
    doCreateSecondaryWindow(onClose) {
        const win = window.open(DefaultSecondaryWindowService_1.SECONDARY_WINDOW_URL, this.nextWindowId(), 'popup');
        if (win) {
            // Add the unload listener after the dom content was loaded because otherwise the unload listener is called already on open in some browsers (e.g. Chrome).
            win.addEventListener('DOMContentLoaded', () => {
                win.addEventListener('unload', () => {
                    this.handleWindowClosed(win, onClose);
                });
            });
        }
        return win !== null && win !== void 0 ? win : undefined;
    }
    handleWindowClosed(win, onClose) {
        const extIndex = this.secondaryWindows.indexOf(win);
        if (extIndex > -1) {
            this.secondaryWindows.splice(extIndex, 1);
        }
        ;
        onClose === null || onClose === void 0 ? void 0 : onClose(win);
    }
    focus(win) {
        win.focus();
    }
    nextWindowId() {
        return `${this.prefix}-secondaryWindow-${this.nextId++}`;
    }
};
// secondary-window.html is part of Theia's generated code. It is generated by dev-packages/application-manager/src/generator/frontend-generator.ts
DefaultSecondaryWindowService.SECONDARY_WINDOW_URL = 'secondary-window.html';
__decorate([
    (0, inversify_1.inject)(window_service_1.WindowService),
    __metadata("design:type", Object)
], DefaultSecondaryWindowService.prototype, "windowService", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], DefaultSecondaryWindowService.prototype, "init", null);
DefaultSecondaryWindowService = DefaultSecondaryWindowService_1 = __decorate([
    (0, inversify_1.injectable)()
], DefaultSecondaryWindowService);
exports.DefaultSecondaryWindowService = DefaultSecondaryWindowService;


/***/ }),

/***/ "../../node_modules/@theia/core/lib/browser/window/default-window-service.js":
/*!***********************************************************************************!*\
  !*** ../../node_modules/@theia/core/lib/browser/window/default-window-service.js ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DefaultWindowService = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../../node_modules/inversify/lib/inversify.js");
const common_1 = __webpack_require__(/*! ../../common */ "../../node_modules/@theia/core/lib/common/index.js");
const core_preferences_1 = __webpack_require__(/*! ../core-preferences */ "../../node_modules/@theia/core/lib/browser/core-preferences.js");
const contribution_provider_1 = __webpack_require__(/*! ../../common/contribution-provider */ "../../node_modules/@theia/core/lib/common/contribution-provider.js");
const frontend_application_1 = __webpack_require__(/*! ../frontend-application */ "../../node_modules/@theia/core/lib/browser/frontend-application.js");
const window_1 = __webpack_require__(/*! ../../common/window */ "../../node_modules/@theia/core/lib/common/window.js");
const dialogs_1 = __webpack_require__(/*! ../dialogs */ "../../node_modules/@theia/core/lib/browser/dialogs.js");
const frontend_application_state_1 = __webpack_require__(/*! ../../common/frontend-application-state */ "../../node_modules/@theia/core/lib/common/frontend-application-state.js");
let DefaultWindowService = class DefaultWindowService {
    constructor() {
        this.allowVetoes = true;
        this.onUnloadEmitter = new common_1.Emitter();
    }
    get onUnload() {
        return this.onUnloadEmitter.event;
    }
    onStart(app) {
        this.frontendApplication = app;
        this.registerUnloadListeners();
    }
    openNewWindow(url) {
        window.open(url, undefined, 'noopener');
        return undefined;
    }
    openNewDefaultWindow() {
        this.openNewWindow(`#${window_1.DEFAULT_WINDOW_HASH}`);
    }
    /**
     * Returns a list of actions that {@link FrontendApplicationContribution}s would like to take before shutdown
     * It is expected that this will succeed - i.e. return an empty array - at most once per session. If no vetoes are received
     * during any cycle, no further checks will be made. In that case, shutdown should proceed unconditionally.
     */
    collectContributionUnloadVetoes() {
        var _a;
        const vetoes = [];
        if (this.allowVetoes) {
            const shouldConfirmExit = this.corePreferences['application.confirmExit'];
            for (const contribution of this.contributions.getContributions()) {
                const veto = (_a = contribution.onWillStop) === null || _a === void 0 ? void 0 : _a.call(contribution, this.frontendApplication);
                if (veto && shouldConfirmExit !== 'never') { // Ignore vetoes if we should not prompt the user on exit.
                    if (frontend_application_1.OnWillStopAction.is(veto)) {
                        vetoes.push(veto);
                    }
                    else {
                        vetoes.push({ reason: 'No reason given', action: () => false });
                    }
                }
            }
            vetoes.sort((a, b) => { var _a, _b; return ((_a = a.priority) !== null && _a !== void 0 ? _a : -Infinity) - ((_b = b.priority) !== null && _b !== void 0 ? _b : -Infinity); });
            if (vetoes.length === 0 && shouldConfirmExit === 'always') {
                vetoes.push({ reason: 'application.confirmExit preference', action: () => (0, dialogs_1.confirmExit)() });
            }
            if (vetoes.length === 0) {
                this.allowVetoes = false;
            }
        }
        return vetoes;
    }
    /**
     * Implement the mechanism to detect unloading of the page.
     */
    registerUnloadListeners() {
        window.addEventListener('beforeunload', event => this.handleBeforeUnloadEvent(event));
        // In a browser, `unload` is correctly fired when the page unloads, unlike Electron.
        // If `beforeunload` is cancelled, the user will be prompted to leave or stay.
        // If the user stays, the page won't be unloaded, so `unload` is not fired.
        // If the user leaves, the page will be unloaded, so `unload` is fired.
        window.addEventListener('unload', () => this.onUnloadEmitter.fire());
    }
    async isSafeToShutDown(stopReason) {
        const vetoes = this.collectContributionUnloadVetoes();
        if (vetoes.length === 0) {
            return true;
        }
        const preparedValues = await Promise.all(vetoes.map(e => { var _a; return (_a = e.prepare) === null || _a === void 0 ? void 0 : _a.call(e, stopReason); }));
        console.debug('Shutdown prevented by', vetoes.map(({ reason }) => reason).join(', '));
        for (let i = 0; i < vetoes.length; i++) {
            try {
                const result = await vetoes[i].action(preparedValues[i], stopReason);
                if (!result) {
                    return false;
                }
            }
            catch (e) {
                console.error(e);
            }
        }
        console.debug('OnWillStop actions resolved; allowing shutdown');
        this.allowVetoes = false;
        return true;
    }
    setSafeToShutDown() {
        this.allowVetoes = false;
    }
    /**
     * Called when the `window` is about to `unload` its resources.
     * At this point, the `document` is still visible and the [`BeforeUnloadEvent`](https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event)
     * event will be canceled if the return value of this method is `false`.
     *
     * In Electron, handleCloseRequestEvent is is run instead.
     */
    handleBeforeUnloadEvent(event) {
        const vetoes = this.collectContributionUnloadVetoes();
        if (vetoes.length) {
            // In the browser, we don't call the functions because this has to finish in a single tick, so we treat any desired action as a veto.
            console.debug('Shutdown prevented by', vetoes.map(({ reason }) => reason).join(', '));
            return this.preventUnload(event);
        }
        console.debug('Shutdown will proceed.');
    }
    /**
     * Notify the browser that we do not want to unload.
     *
     * Notes:
     *  - Shows a confirmation popup in browsers.
     *  - Prevents the window from closing without confirmation in electron.
     *
     * @param event The beforeunload event
     */
    preventUnload(event) {
        event.returnValue = '';
        event.preventDefault();
        return '';
    }
    reload() {
        this.isSafeToShutDown(frontend_application_state_1.StopReason.Reload).then(isSafe => {
            if (isSafe) {
                window.location.reload();
            }
        });
    }
};
__decorate([
    (0, inversify_1.inject)(core_preferences_1.CorePreferences),
    __metadata("design:type", Object)
], DefaultWindowService.prototype, "corePreferences", void 0);
__decorate([
    (0, inversify_1.inject)(contribution_provider_1.ContributionProvider),
    (0, inversify_1.named)(frontend_application_1.FrontendApplicationContribution),
    __metadata("design:type", Object)
], DefaultWindowService.prototype, "contributions", void 0);
DefaultWindowService = __decorate([
    (0, inversify_1.injectable)()
], DefaultWindowService);
exports.DefaultWindowService = DefaultWindowService;


/***/ }),

/***/ "../../node_modules/@theia/core/lib/common/window.js":
/*!***********************************************************!*\
  !*** ../../node_modules/@theia/core/lib/common/window.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {


// *****************************************************************************
// Copyright (C) 2021 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DEFAULT_WINDOW_HASH = void 0;
/**
 * The window hash value that is used to spawn a new default window.
 */
exports.DEFAULT_WINDOW_HASH = '!empty';


/***/ }),

/***/ "../../node_modules/@theia/core/lib/electron-browser/electron-clipboard-service.js":
/*!*****************************************************************************************!*\
  !*** ../../node_modules/@theia/core/lib/electron-browser/electron-clipboard-service.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


// *****************************************************************************
// Copyright (C) 2019 RedHat and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ElectronClipboardService = void 0;
// eslint-disable-next-line import/no-extraneous-dependencies
const inversify_1 = __webpack_require__(/*! inversify */ "../../node_modules/inversify/lib/inversify.js");
let ElectronClipboardService = class ElectronClipboardService {
    readText() {
        return window.electronTheiaCore.readClipboard();
    }
    writeText(value) {
        window.electronTheiaCore.writeClipboard(value);
    }
};
ElectronClipboardService = __decorate([
    (0, inversify_1.injectable)()
], ElectronClipboardService);
exports.ElectronClipboardService = ElectronClipboardService;


/***/ }),

/***/ "../../node_modules/@theia/core/lib/electron-browser/window/electron-frontend-application-state.js":
/*!*********************************************************************************************************!*\
  !*** ../../node_modules/@theia/core/lib/electron-browser/window/electron-frontend-application-state.js ***!
  \*********************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


// *****************************************************************************
// Copyright (C) 2022 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ElectronFrontendApplicationStateService = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../../node_modules/inversify/lib/inversify.js");
const frontend_application_state_1 = __webpack_require__(/*! ../../browser/frontend-application-state */ "../../node_modules/@theia/core/lib/browser/frontend-application-state.js");
let ElectronFrontendApplicationStateService = class ElectronFrontendApplicationStateService extends frontend_application_state_1.FrontendApplicationStateService {
    doSetState(state) {
        super.doSetState(state);
        window.electronTheiaCore.applicationStateChanged(state);
    }
};
ElectronFrontendApplicationStateService = __decorate([
    (0, inversify_1.injectable)()
], ElectronFrontendApplicationStateService);
exports.ElectronFrontendApplicationStateService = ElectronFrontendApplicationStateService;


/***/ }),

/***/ "../../node_modules/@theia/core/lib/electron-browser/window/electron-secondary-window-service.js":
/*!*******************************************************************************************************!*\
  !*** ../../node_modules/@theia/core/lib/electron-browser/window/electron-secondary-window-service.js ***!
  \*******************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


// *****************************************************************************
// Copyright (C) 2022 STMicroelectronics, Ericsson, ARM, EclipseSource and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ElectronSecondaryWindowService = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../../node_modules/inversify/lib/inversify.js");
const default_secondary_window_service_1 = __webpack_require__(/*! ../../browser/window/default-secondary-window-service */ "../../node_modules/@theia/core/lib/browser/window/default-secondary-window-service.js");
let ElectronSecondaryWindowService = class ElectronSecondaryWindowService extends default_secondary_window_service_1.DefaultSecondaryWindowService {
    focus(win) {
        window.electronTheiaCore.focusWindow(win.name);
    }
    doCreateSecondaryWindow(onClose) {
        const w = super.doCreateSecondaryWindow(onClose);
        if (w) {
            window.electronTheiaCore.setMenuBarVisible(false, w.name);
        }
        return w;
    }
};
ElectronSecondaryWindowService = __decorate([
    (0, inversify_1.injectable)()
], ElectronSecondaryWindowService);
exports.ElectronSecondaryWindowService = ElectronSecondaryWindowService;


/***/ }),

/***/ "../../node_modules/@theia/core/lib/electron-browser/window/electron-window-module.js":
/*!********************************************************************************************!*\
  !*** ../../node_modules/@theia/core/lib/electron-browser/window/electron-window-module.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! inversify */ "../../node_modules/inversify/lib/inversify.js");
const window_service_1 = __webpack_require__(/*! ../../browser/window/window-service */ "../../node_modules/@theia/core/lib/browser/window/window-service.js");
const electron_window_service_1 = __webpack_require__(/*! ./electron-window-service */ "../../node_modules/@theia/core/lib/electron-browser/window/electron-window-service.js");
const frontend_application_1 = __webpack_require__(/*! ../../browser/frontend-application */ "../../node_modules/@theia/core/lib/browser/frontend-application.js");
const electron_clipboard_service_1 = __webpack_require__(/*! ../electron-clipboard-service */ "../../node_modules/@theia/core/lib/electron-browser/electron-clipboard-service.js");
const clipboard_service_1 = __webpack_require__(/*! ../../browser/clipboard-service */ "../../node_modules/@theia/core/lib/browser/clipboard-service.js");
const electron_main_window_service_1 = __webpack_require__(/*! ../../electron-common/electron-main-window-service */ "../../node_modules/@theia/core/lib/electron-common/electron-main-window-service.js");
const electron_ipc_connection_provider_1 = __webpack_require__(/*! ../messaging/electron-ipc-connection-provider */ "../../node_modules/@theia/core/lib/electron-browser/messaging/electron-ipc-connection-provider.js");
const electron_window_preferences_1 = __webpack_require__(/*! ./electron-window-preferences */ "../../node_modules/@theia/core/lib/electron-browser/window/electron-window-preferences.js");
const frontend_application_state_1 = __webpack_require__(/*! ../../browser/frontend-application-state */ "../../node_modules/@theia/core/lib/browser/frontend-application-state.js");
const electron_frontend_application_state_1 = __webpack_require__(/*! ./electron-frontend-application-state */ "../../node_modules/@theia/core/lib/electron-browser/window/electron-frontend-application-state.js");
const electron_secondary_window_service_1 = __webpack_require__(/*! ./electron-secondary-window-service */ "../../node_modules/@theia/core/lib/electron-browser/window/electron-secondary-window-service.js");
const secondary_window_service_1 = __webpack_require__(/*! ../../browser/window/secondary-window-service */ "../../node_modules/@theia/core/lib/browser/window/secondary-window-service.js");
exports["default"] = new inversify_1.ContainerModule((bind, unbind, isBound, rebind) => {
    bind(electron_main_window_service_1.ElectronMainWindowService).toDynamicValue(context => electron_ipc_connection_provider_1.ElectronIpcConnectionProvider.createProxy(context.container, electron_main_window_service_1.electronMainWindowServicePath)).inSingletonScope();
    (0, electron_window_preferences_1.bindWindowPreferences)(bind);
    bind(window_service_1.WindowService).to(electron_window_service_1.ElectronWindowService).inSingletonScope();
    bind(frontend_application_1.FrontendApplicationContribution).toService(window_service_1.WindowService);
    bind(clipboard_service_1.ClipboardService).to(electron_clipboard_service_1.ElectronClipboardService).inSingletonScope();
    rebind(frontend_application_state_1.FrontendApplicationStateService).to(electron_frontend_application_state_1.ElectronFrontendApplicationStateService).inSingletonScope();
    bind(secondary_window_service_1.SecondaryWindowService).to(electron_secondary_window_service_1.ElectronSecondaryWindowService).inSingletonScope();
});


/***/ }),

/***/ "../../node_modules/@theia/core/lib/electron-browser/window/electron-window-preferences.js":
/*!*************************************************************************************************!*\
  !*** ../../node_modules/@theia/core/lib/electron-browser/window/electron-window-preferences.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


// *****************************************************************************
// Copyright (C) 2021 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.bindWindowPreferences = exports.createElectronWindowPreferences = exports.ElectronWindowPreferences = exports.ElectronWindowPreferenceContribution = exports.ElectronWindowConfiguration = exports.electronWindowPreferencesSchema = exports.ZoomLevel = void 0;
const nls_1 = __webpack_require__(/*! ../../common/nls */ "../../node_modules/@theia/core/lib/common/nls.js");
const preferences_1 = __webpack_require__(/*! ../../browser/preferences */ "../../node_modules/@theia/core/lib/browser/preferences/index.js");
const common_1 = __webpack_require__(/*! ../../common */ "../../node_modules/@theia/core/lib/common/index.js");
var ZoomLevel;
(function (ZoomLevel) {
    ZoomLevel.DEFAULT = 0;
    // copied from https://github.com/microsoft/vscode/blob/dda96b69bfc63f309e60cfc5f98cb863c46b32ac/src/vs/workbench/electron-sandbox/actions/windowActions.ts#L47-L48
    ZoomLevel.MIN = -8;
    ZoomLevel.MAX = 9;
    // amount to increment or decrement the window zoom level.
    ZoomLevel.VARIATION = 0.5;
})(ZoomLevel = exports.ZoomLevel || (exports.ZoomLevel = {}));
exports.electronWindowPreferencesSchema = {
    type: 'object',
    properties: {
        'window.zoomLevel': {
            'type': 'number',
            'default': ZoomLevel.DEFAULT,
            'minimum': ZoomLevel.MIN,
            'maximum': ZoomLevel.MAX,
            'scope': 'application',
            // eslint-disable-next-line max-len
            'description': nls_1.nls.localizeByDefault('Adjust the zoom level of the window. The original size is 0 and each increment above (e.g. 1) or below (e.g. -1) represents zooming 20% larger or smaller. You can also enter decimals to adjust the zoom level with a finer granularity.')
        },
        'window.titleBarStyle': {
            type: 'string',
            enum: ['native', 'custom'],
            default: common_1.isWindows ? 'custom' : 'native',
            scope: 'application',
            // eslint-disable-next-line max-len
            description: nls_1.nls.localizeByDefault('Adjust the appearance of the window title bar. On Linux and Windows, this setting also affects the application and context menu appearances. Changes require a full restart to apply.'),
            included: !common_1.isOSX
        },
    }
};
class ElectronWindowConfiguration {
}
exports.ElectronWindowConfiguration = ElectronWindowConfiguration;
exports.ElectronWindowPreferenceContribution = Symbol('ElectronWindowPreferenceContribution');
exports.ElectronWindowPreferences = Symbol('ElectronWindowPreferences');
function createElectronWindowPreferences(preferences, schema = exports.electronWindowPreferencesSchema) {
    return (0, preferences_1.createPreferenceProxy)(preferences, schema);
}
exports.createElectronWindowPreferences = createElectronWindowPreferences;
function bindWindowPreferences(bind) {
    bind(exports.ElectronWindowPreferences).toDynamicValue(ctx => {
        const preferences = ctx.container.get(preferences_1.PreferenceService);
        const contribution = ctx.container.get(exports.ElectronWindowPreferenceContribution);
        return createElectronWindowPreferences(preferences, contribution.schema);
    }).inSingletonScope();
    bind(exports.ElectronWindowPreferenceContribution).toConstantValue({ schema: exports.electronWindowPreferencesSchema });
    bind(preferences_1.PreferenceContribution).toService(exports.ElectronWindowPreferenceContribution);
}
exports.bindWindowPreferences = bindWindowPreferences;


/***/ }),

/***/ "../../node_modules/@theia/core/lib/electron-browser/window/electron-window-service.js":
/*!*********************************************************************************************!*\
  !*** ../../node_modules/@theia/core/lib/electron-browser/window/electron-window-service.js ***!
  \*********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ElectronWindowService = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../../node_modules/inversify/lib/inversify.js");
const default_window_service_1 = __webpack_require__(/*! ../../browser/window/default-window-service */ "../../node_modules/@theia/core/lib/browser/window/default-window-service.js");
const electron_main_window_service_1 = __webpack_require__(/*! ../../electron-common/electron-main-window-service */ "../../node_modules/@theia/core/lib/electron-common/electron-main-window-service.js");
const electron_window_preferences_1 = __webpack_require__(/*! ./electron-window-preferences */ "../../node_modules/@theia/core/lib/electron-browser/window/electron-window-preferences.js");
let ElectronWindowService = class ElectronWindowService extends default_window_service_1.DefaultWindowService {
    constructor() {
        super(...arguments);
        /**
         * Lock to prevent multiple parallel executions of the `beforeunload` listener.
         */
        this.isUnloading = false;
        /**
         * Close the window right away when `true`, else check if we can unload.
         */
        this.closeOnUnload = false;
    }
    openNewWindow(url, { external } = {}) {
        this.delegate.openNewWindow(url, { external });
        return undefined;
    }
    openNewDefaultWindow() {
        this.delegate.openNewDefaultWindow();
    }
    init() {
        // Update the default zoom level on startup when the preferences event is fired.
        this.electronWindowPreferences.onPreferenceChanged(e => {
            if (e.preferenceName === 'window.zoomLevel') {
                this.updateWindowZoomLevel();
            }
        });
    }
    registerUnloadListeners() {
        window.electronTheiaCore.setCloseRequestHandler(reason => this.isSafeToShutDown(reason));
        window.addEventListener('unload', () => {
            this.onUnloadEmitter.fire();
        });
    }
    /**
     * Updates the window zoom level based on the preference value.
     */
    async updateWindowZoomLevel() {
        const preferredZoomLevel = this.electronWindowPreferences['window.zoomLevel'];
        if (await window.electronTheiaCore.getZoomLevel() !== preferredZoomLevel) {
            window.electronTheiaCore.setZoomLevel(preferredZoomLevel);
        }
    }
    reload() {
        window.electronTheiaCore.requestReload();
    }
};
__decorate([
    (0, inversify_1.inject)(electron_main_window_service_1.ElectronMainWindowService),
    __metadata("design:type", Object)
], ElectronWindowService.prototype, "delegate", void 0);
__decorate([
    (0, inversify_1.inject)(electron_window_preferences_1.ElectronWindowPreferences),
    __metadata("design:type", Object)
], ElectronWindowService.prototype, "electronWindowPreferences", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], ElectronWindowService.prototype, "init", null);
ElectronWindowService = __decorate([
    (0, inversify_1.injectable)()
], ElectronWindowService);
exports.ElectronWindowService = ElectronWindowService;


/***/ }),

/***/ "../../node_modules/@theia/core/lib/electron-common/electron-main-window-service.js":
/*!******************************************************************************************!*\
  !*** ../../node_modules/@theia/core/lib/electron-common/electron-main-window-service.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {


// *****************************************************************************
// Copyright (C) 2020 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ElectronMainWindowService = exports.electronMainWindowServicePath = void 0;
exports.electronMainWindowServicePath = '/services/electron-window';
exports.ElectronMainWindowService = Symbol('ElectronMainWindowService');


/***/ })

}]);
//# sourceMappingURL=vendors-node_modules_theia_core_lib_electron-browser_window_electron-window-module_js.js.map