"use strict";
(self["webpackChunkelectron_app"] = self["webpackChunkelectron_app"] || []).push([["node_modules_theia_core_lib_electron-browser_keyboard_electron-keyboard-module_js"],{

/***/ "../../node_modules/@theia/core/lib/electron-browser/keyboard/electron-keyboard-layout-change-notifier.js":
/*!****************************************************************************************************************!*\
  !*** ../../node_modules/@theia/core/lib/electron-browser/keyboard/electron-keyboard-layout-change-notifier.js ***!
  \****************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


// *****************************************************************************
// Copyright (C) 2019 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ElectronKeyboardLayoutChangeNotifier = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../../node_modules/inversify/lib/inversify.js");
const event_1 = __webpack_require__(/*! ../../common/event */ "../../node_modules/@theia/core/lib/common/event.js");
/**
 * Keyboard layout changes are detected by the native-keymap package. This must happen in the
 * main process of Electron. The events are sent to the renderer process using Electron IPC.
 */
let ElectronKeyboardLayoutChangeNotifier = class ElectronKeyboardLayoutChangeNotifier {
    constructor() {
        this.nativeLayoutChanged = new event_1.Emitter();
    }
    get onDidChangeNativeLayout() {
        return this.nativeLayoutChanged.event;
    }
    initialize() {
        window.electronTheiaCore.onKeyboardLayoutChanged((newLayout) => this.nativeLayoutChanged.fire(newLayout));
    }
};
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], ElectronKeyboardLayoutChangeNotifier.prototype, "initialize", null);
ElectronKeyboardLayoutChangeNotifier = __decorate([
    (0, inversify_1.injectable)()
], ElectronKeyboardLayoutChangeNotifier);
exports.ElectronKeyboardLayoutChangeNotifier = ElectronKeyboardLayoutChangeNotifier;


/***/ }),

/***/ "../../node_modules/@theia/core/lib/electron-browser/keyboard/electron-keyboard-module.js":
/*!************************************************************************************************!*\
  !*** ../../node_modules/@theia/core/lib/electron-browser/keyboard/electron-keyboard-module.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


// *****************************************************************************
// Copyright (C) 2019 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! inversify */ "../../node_modules/inversify/lib/inversify.js");
const keyboard_layout_provider_1 = __webpack_require__(/*! ../../common/keyboard/keyboard-layout-provider */ "../../node_modules/@theia/core/lib/common/keyboard/keyboard-layout-provider.js");
const ws_connection_provider_1 = __webpack_require__(/*! ../../browser/messaging/ws-connection-provider */ "../../node_modules/@theia/core/lib/browser/messaging/ws-connection-provider.js");
const electron_keyboard_layout_change_notifier_1 = __webpack_require__(/*! ./electron-keyboard-layout-change-notifier */ "../../node_modules/@theia/core/lib/electron-browser/keyboard/electron-keyboard-layout-change-notifier.js");
exports["default"] = new inversify_1.ContainerModule((bind, unbind, isBound, rebind) => {
    bind(keyboard_layout_provider_1.KeyboardLayoutProvider).toDynamicValue(ctx => ws_connection_provider_1.WebSocketConnectionProvider.createProxy(ctx.container, keyboard_layout_provider_1.keyboardPath)).inSingletonScope();
    bind(electron_keyboard_layout_change_notifier_1.ElectronKeyboardLayoutChangeNotifier).toSelf().inSingletonScope();
    bind(keyboard_layout_provider_1.KeyboardLayoutChangeNotifier).toService(electron_keyboard_layout_change_notifier_1.ElectronKeyboardLayoutChangeNotifier);
});


/***/ })

}]);
//# sourceMappingURL=node_modules_theia_core_lib_electron-browser_keyboard_electron-keyboard-module_js.js.map