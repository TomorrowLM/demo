{"version":3,"file":"vendors-node_modules_theia_core_lib_electron-browser_window_electron-window-module_js.js","mappings":"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","sources":["webpack:///../../node_modules/@theia/core/src/browser/window/default-secondary-window-service.ts?","webpack:///../../node_modules/@theia/core/src/browser/window/default-window-service.ts?","webpack:///../../node_modules/@theia/core/src/common/window.ts?","webpack:///../../node_modules/@theia/core/src/electron-browser/electron-clipboard-service.ts?","webpack:///../../node_modules/@theia/core/src/electron-browser/window/electron-frontend-application-state.ts?","webpack:///../../node_modules/@theia/core/src/electron-browser/window/electron-secondary-window-service.ts?","webpack:///../../node_modules/@theia/core/src/electron-browser/window/electron-window-module.ts?","webpack:///../../node_modules/@theia/core/src/electron-browser/window/electron-window-preferences.ts?","webpack:///../../node_modules/@theia/core/src/electron-browser/window/electron-window-service.ts?","webpack:///../../node_modules/@theia/core/src/electron-common/electron-main-window-service.ts?"],"sourcesContent":["// *****************************************************************************\n// Copyright (C) 2022 STMicroelectronics, Ericsson, ARM, EclipseSource and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n// *****************************************************************************\nimport { inject, injectable, postConstruct } from 'inversify';\nimport { SecondaryWindowService } from './secondary-window-service';\nimport { WindowService } from './window-service';\n\n@injectable()\nexport class DefaultSecondaryWindowService implements SecondaryWindowService {\n    // secondary-window.html is part of Theia's generated code. It is generated by dev-packages/application-manager/src/generator/frontend-generator.ts\n    protected static SECONDARY_WINDOW_URL = 'secondary-window.html';\n\n    /**\n     * Randomized prefix to be included in opened windows' ids.\n     * This avoids conflicts when creating sub-windows from multiple theia instances (e.g. by opening Theia multiple times in the same browser)\n     */\n    protected readonly prefix = crypto.getRandomValues(new Uint32Array(1))[0];\n    /** Unique id. Increase after every access. */\n    private nextId = 0;\n\n    protected secondaryWindows: Window[] = [];\n\n    @inject(WindowService)\n    protected readonly windowService: WindowService;\n\n    @postConstruct()\n    init(): void {\n        // Close all open windows when the main window is closed.\n        this.windowService.onUnload(() => {\n            // Iterate backwards because calling window.close might remove the window from the array\n            for (let i = this.secondaryWindows.length - 1; i >= 0; i--) {\n                this.secondaryWindows[i].close();\n            }\n        });\n    }\n\n    createSecondaryWindow(onClose?: (closedWin: Window) => void): Window | undefined {\n        const win = this.doCreateSecondaryWindow(onClose);\n        if (win) {\n            this.secondaryWindows.push(win);\n        }\n        return win;\n    }\n\n    protected doCreateSecondaryWindow(onClose?: (closedWin: Window) => void): Window | undefined {\n        const win = window.open(DefaultSecondaryWindowService.SECONDARY_WINDOW_URL, this.nextWindowId(), 'popup');\n        if (win) {\n            // Add the unload listener after the dom content was loaded because otherwise the unload listener is called already on open in some browsers (e.g. Chrome).\n            win.addEventListener('DOMContentLoaded', () => {\n                win.addEventListener('unload', () => {\n                    this.handleWindowClosed(win, onClose);\n                });\n            });\n        }\n        return win ?? undefined;\n    }\n\n    protected handleWindowClosed(win: Window, onClose?: (closedWin: Window) => void): void {\n        const extIndex = this.secondaryWindows.indexOf(win);\n        if (extIndex > -1) {\n            this.secondaryWindows.splice(extIndex, 1);\n        };\n        onClose?.(win);\n    }\n\n    focus(win: Window): void {\n        win.focus();\n    }\n\n    protected nextWindowId(): string {\n        return `${this.prefix}-secondaryWindow-${this.nextId++}`;\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2017 TypeFox and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { inject, injectable, named } from 'inversify';\nimport { Event, Emitter } from '../../common';\nimport { CorePreferences } from '../core-preferences';\nimport { ContributionProvider } from '../../common/contribution-provider';\nimport { FrontendApplicationContribution, FrontendApplication, OnWillStopAction } from '../frontend-application';\nimport { WindowService } from './window-service';\nimport { DEFAULT_WINDOW_HASH } from '../../common/window';\nimport { confirmExit } from '../dialogs';\nimport { StopReason } from '../../common/frontend-application-state';\n\n@injectable()\nexport class DefaultWindowService implements WindowService, FrontendApplicationContribution {\n\n    protected frontendApplication: FrontendApplication;\n    protected allowVetoes = true;\n\n    protected onUnloadEmitter = new Emitter<void>();\n    get onUnload(): Event<void> {\n        return this.onUnloadEmitter.event;\n    }\n\n    @inject(CorePreferences)\n    protected readonly corePreferences: CorePreferences;\n\n    @inject(ContributionProvider)\n    @named(FrontendApplicationContribution)\n    protected readonly contributions: ContributionProvider<FrontendApplicationContribution>;\n\n    onStart(app: FrontendApplication): void {\n        this.frontendApplication = app;\n        this.registerUnloadListeners();\n    }\n\n    openNewWindow(url: string): undefined {\n        window.open(url, undefined, 'noopener');\n        return undefined;\n    }\n\n    openNewDefaultWindow(): void {\n        this.openNewWindow(`#${DEFAULT_WINDOW_HASH}`);\n    }\n\n    /**\n     * Returns a list of actions that {@link FrontendApplicationContribution}s would like to take before shutdown\n     * It is expected that this will succeed - i.e. return an empty array - at most once per session. If no vetoes are received\n     * during any cycle, no further checks will be made. In that case, shutdown should proceed unconditionally.\n     */\n    protected collectContributionUnloadVetoes(): OnWillStopAction[] {\n        const vetoes: OnWillStopAction[] = [];\n        if (this.allowVetoes) {\n            const shouldConfirmExit = this.corePreferences['application.confirmExit'];\n            for (const contribution of this.contributions.getContributions()) {\n                const veto = contribution.onWillStop?.(this.frontendApplication);\n                if (veto && shouldConfirmExit !== 'never') { // Ignore vetoes if we should not prompt the user on exit.\n                    if (OnWillStopAction.is(veto)) {\n                        vetoes.push(veto);\n                    } else {\n                        vetoes.push({ reason: 'No reason given', action: () => false });\n                    }\n                }\n            }\n            vetoes.sort((a, b) => (a.priority ?? -Infinity) - (b.priority ?? -Infinity));\n            if (vetoes.length === 0 && shouldConfirmExit === 'always') {\n                vetoes.push({ reason: 'application.confirmExit preference', action: () => confirmExit() });\n            }\n            if (vetoes.length === 0) {\n                this.allowVetoes = false;\n            }\n        }\n        return vetoes;\n    }\n\n    /**\n     * Implement the mechanism to detect unloading of the page.\n     */\n    protected registerUnloadListeners(): void {\n        window.addEventListener('beforeunload', event => this.handleBeforeUnloadEvent(event));\n        // In a browser, `unload` is correctly fired when the page unloads, unlike Electron.\n        // If `beforeunload` is cancelled, the user will be prompted to leave or stay.\n        // If the user stays, the page won't be unloaded, so `unload` is not fired.\n        // If the user leaves, the page will be unloaded, so `unload` is fired.\n        window.addEventListener('unload', () => this.onUnloadEmitter.fire());\n    }\n\n    async isSafeToShutDown(stopReason: StopReason): Promise<boolean> {\n        const vetoes = this.collectContributionUnloadVetoes();\n        if (vetoes.length === 0) {\n            return true;\n        }\n        const preparedValues = await Promise.all(vetoes.map(e => e.prepare?.(stopReason)));\n        console.debug('Shutdown prevented by', vetoes.map(({ reason }) => reason).join(', '));\n        for (let i = 0; i < vetoes.length; i++) {\n            try {\n                const result = await vetoes[i].action(preparedValues[i], stopReason);\n                if (!result) {\n                    return false;\n                }\n            } catch (e) {\n                console.error(e);\n            }\n        }\n        console.debug('OnWillStop actions resolved; allowing shutdown');\n        this.allowVetoes = false;\n        return true;\n    }\n\n    setSafeToShutDown(): void {\n        this.allowVetoes = false;\n    }\n\n    /**\n     * Called when the `window` is about to `unload` its resources.\n     * At this point, the `document` is still visible and the [`BeforeUnloadEvent`](https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event)\n     * event will be canceled if the return value of this method is `false`.\n     *\n     * In Electron, handleCloseRequestEvent is is run instead.\n     */\n    protected handleBeforeUnloadEvent(event: BeforeUnloadEvent): string | void {\n        const vetoes = this.collectContributionUnloadVetoes();\n        if (vetoes.length) {\n            // In the browser, we don't call the functions because this has to finish in a single tick, so we treat any desired action as a veto.\n            console.debug('Shutdown prevented by', vetoes.map(({ reason }) => reason).join(', '));\n            return this.preventUnload(event);\n        }\n        console.debug('Shutdown will proceed.');\n    }\n\n    /**\n     * Notify the browser that we do not want to unload.\n     *\n     * Notes:\n     *  - Shows a confirmation popup in browsers.\n     *  - Prevents the window from closing without confirmation in electron.\n     *\n     * @param event The beforeunload event\n     */\n    protected preventUnload(event: BeforeUnloadEvent): string | void {\n        event.returnValue = '';\n        event.preventDefault();\n        return '';\n    }\n\n    reload(): void {\n        this.isSafeToShutDown(StopReason.Reload).then(isSafe => {\n            if (isSafe) {\n                window.location.reload();\n            }\n        });\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2021 Ericsson and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n// *****************************************************************************\n\n/**\n * The window hash value that is used to spawn a new default window.\n */\nexport const DEFAULT_WINDOW_HASH: string = '!empty';\n\n/**\n * The options for opening new windows.\n */\nexport interface NewWindowOptions {\n    /**\n     * Controls whether the window should be opened externally.\n     */\n    readonly external?: boolean;\n}\n","// *****************************************************************************\n// Copyright (C) 2019 RedHat and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n// *****************************************************************************\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { injectable } from 'inversify';\nimport { ClipboardService } from '../browser/clipboard-service';\n\n@injectable()\nexport class ElectronClipboardService implements ClipboardService {\n\n    readText(): string {\n        return window.electronTheiaCore.readClipboard();\n    }\n\n    writeText(value: string): void {\n        window.electronTheiaCore.writeClipboard(value);\n    }\n\n}\n","// *****************************************************************************\n// Copyright (C) 2022 Ericsson and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { injectable } from 'inversify';\nimport { FrontendApplicationState, FrontendApplicationStateService } from '../../browser/frontend-application-state';\n\n@injectable()\nexport class ElectronFrontendApplicationStateService extends FrontendApplicationStateService {\n    protected override doSetState(state: FrontendApplicationState): void {\n        super.doSetState(state);\n        window.electronTheiaCore.applicationStateChanged(state);\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2022 STMicroelectronics, Ericsson, ARM, EclipseSource and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { injectable } from 'inversify';\nimport { DefaultSecondaryWindowService } from '../../browser/window/default-secondary-window-service';\n\n@injectable()\nexport class ElectronSecondaryWindowService extends DefaultSecondaryWindowService {\n    override focus(win: Window): void {\n        window.electronTheiaCore.focusWindow(win.name);\n    }\n\n    protected override doCreateSecondaryWindow(onClose?: (closedWin: Window) => void): Window | undefined {\n        const w = super.doCreateSecondaryWindow(onClose);\n        if (w) {\n            window.electronTheiaCore.setMenuBarVisible(false, w.name);\n        }\n        return w;\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2017 TypeFox and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { ContainerModule } from 'inversify';\nimport { WindowService } from '../../browser/window/window-service';\nimport { ElectronWindowService } from './electron-window-service';\nimport { FrontendApplicationContribution } from '../../browser/frontend-application';\nimport { ElectronClipboardService } from '../electron-clipboard-service';\nimport { ClipboardService } from '../../browser/clipboard-service';\nimport { ElectronMainWindowService, electronMainWindowServicePath } from '../../electron-common/electron-main-window-service';\nimport { ElectronIpcConnectionProvider } from '../messaging/electron-ipc-connection-provider';\nimport { bindWindowPreferences } from './electron-window-preferences';\nimport { FrontendApplicationStateService } from '../../browser/frontend-application-state';\nimport { ElectronFrontendApplicationStateService } from './electron-frontend-application-state';\nimport { ElectronSecondaryWindowService } from './electron-secondary-window-service';\nimport { SecondaryWindowService } from '../../browser/window/secondary-window-service';\n\nexport default new ContainerModule((bind, unbind, isBound, rebind) => {\n    bind(ElectronMainWindowService).toDynamicValue(context =>\n        ElectronIpcConnectionProvider.createProxy(context.container, electronMainWindowServicePath)\n    ).inSingletonScope();\n    bindWindowPreferences(bind);\n    bind(WindowService).to(ElectronWindowService).inSingletonScope();\n    bind(FrontendApplicationContribution).toService(WindowService);\n    bind(ClipboardService).to(ElectronClipboardService).inSingletonScope();\n    rebind(FrontendApplicationStateService).to(ElectronFrontendApplicationStateService).inSingletonScope();\n    bind(SecondaryWindowService).to(ElectronSecondaryWindowService).inSingletonScope();\n});\n","// *****************************************************************************\n// Copyright (C) 2021 Ericsson and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { interfaces } from 'inversify';\nimport { nls } from '../../common/nls';\nimport { createPreferenceProxy, PreferenceContribution, PreferenceProxy, PreferenceSchema, PreferenceService } from '../../browser/preferences';\nimport { isOSX, isWindows } from '../../common';\n\nexport namespace ZoomLevel {\n    export const DEFAULT = 0;\n    // copied from https://github.com/microsoft/vscode/blob/dda96b69bfc63f309e60cfc5f98cb863c46b32ac/src/vs/workbench/electron-sandbox/actions/windowActions.ts#L47-L48\n    export const MIN = -8;\n    export const MAX = 9;\n    // amount to increment or decrement the window zoom level.\n    export const VARIATION = 0.5;\n}\n\nexport const electronWindowPreferencesSchema: PreferenceSchema = {\n    type: 'object',\n    properties: {\n        'window.zoomLevel': {\n            'type': 'number',\n            'default': ZoomLevel.DEFAULT,\n            'minimum': ZoomLevel.MIN,\n            'maximum': ZoomLevel.MAX,\n            'scope': 'application',\n            // eslint-disable-next-line max-len\n            'description': nls.localizeByDefault('Adjust the zoom level of the window. The original size is 0 and each increment above (e.g. 1) or below (e.g. -1) represents zooming 20% larger or smaller. You can also enter decimals to adjust the zoom level with a finer granularity.')\n        },\n        'window.titleBarStyle': {\n            type: 'string',\n            enum: ['native', 'custom'],\n            default: isWindows ? 'custom' : 'native',\n            scope: 'application',\n            // eslint-disable-next-line max-len\n            description: nls.localizeByDefault('Adjust the appearance of the window title bar. On Linux and Windows, this setting also affects the application and context menu appearances. Changes require a full restart to apply.'),\n            included: !isOSX\n        },\n    }\n};\n\nexport class ElectronWindowConfiguration {\n    'window.zoomLevel': number;\n    'window.titleBarStyle': 'native' | 'custom';\n}\n\nexport const ElectronWindowPreferenceContribution = Symbol('ElectronWindowPreferenceContribution');\nexport const ElectronWindowPreferences = Symbol('ElectronWindowPreferences');\nexport type ElectronWindowPreferences = PreferenceProxy<ElectronWindowConfiguration>;\n\nexport function createElectronWindowPreferences(preferences: PreferenceService, schema: PreferenceSchema = electronWindowPreferencesSchema): ElectronWindowPreferences {\n    return createPreferenceProxy(preferences, schema);\n}\n\nexport function bindWindowPreferences(bind: interfaces.Bind): void {\n    bind(ElectronWindowPreferences).toDynamicValue(ctx => {\n        const preferences = ctx.container.get<PreferenceService>(PreferenceService);\n        const contribution = ctx.container.get<PreferenceContribution>(ElectronWindowPreferenceContribution);\n        return createElectronWindowPreferences(preferences, contribution.schema);\n    }).inSingletonScope();\n    bind(ElectronWindowPreferenceContribution).toConstantValue({ schema: electronWindowPreferencesSchema });\n    bind(PreferenceContribution).toService(ElectronWindowPreferenceContribution);\n}\n","// *****************************************************************************\n// Copyright (C) 2017 TypeFox and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { injectable, inject, postConstruct } from 'inversify';\nimport { NewWindowOptions } from '../../common/window';\nimport { DefaultWindowService } from '../../browser/window/default-window-service';\nimport { ElectronMainWindowService } from '../../electron-common/electron-main-window-service';\nimport { ElectronWindowPreferences } from './electron-window-preferences';\n\n@injectable()\nexport class ElectronWindowService extends DefaultWindowService {\n\n    /**\n     * Lock to prevent multiple parallel executions of the `beforeunload` listener.\n     */\n    protected isUnloading: boolean = false;\n\n    /**\n     * Close the window right away when `true`, else check if we can unload.\n     */\n    protected closeOnUnload: boolean = false;\n\n    @inject(ElectronMainWindowService)\n    protected readonly delegate: ElectronMainWindowService;\n\n    @inject(ElectronWindowPreferences)\n    protected readonly electronWindowPreferences: ElectronWindowPreferences;\n\n    override openNewWindow(url: string, { external }: NewWindowOptions = {}): undefined {\n        this.delegate.openNewWindow(url, { external });\n        return undefined;\n    }\n\n    override openNewDefaultWindow(): void {\n        this.delegate.openNewDefaultWindow();\n    }\n\n    @postConstruct()\n    protected init(): void {\n        // Update the default zoom level on startup when the preferences event is fired.\n        this.electronWindowPreferences.onPreferenceChanged(e => {\n            if (e.preferenceName === 'window.zoomLevel') {\n                this.updateWindowZoomLevel();\n            }\n        });\n    }\n\n    protected override registerUnloadListeners(): void {\n        window.electronTheiaCore.setCloseRequestHandler(reason => this.isSafeToShutDown(reason));\n        window.addEventListener('unload', () => {\n            this.onUnloadEmitter.fire();\n        });\n    }\n\n    /**\n     * Updates the window zoom level based on the preference value.\n     */\n    protected async updateWindowZoomLevel(): Promise<void> {\n        const preferredZoomLevel = this.electronWindowPreferences['window.zoomLevel'];\n        if (await window.electronTheiaCore.getZoomLevel() !== preferredZoomLevel) {\n            window.electronTheiaCore.setZoomLevel(preferredZoomLevel);\n        }\n    }\n\n    override reload(): void {\n        window.electronTheiaCore.requestReload();\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2020 Ericsson and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { NewWindowOptions } from '../common/window';\n\nexport const electronMainWindowServicePath = '/services/electron-window';\nexport const ElectronMainWindowService = Symbol('ElectronMainWindowService');\nexport interface ElectronMainWindowService {\n    openNewWindow(url: string, options?: NewWindowOptions): undefined;\n    openNewDefaultWindow(): void;\n}\n"],"names":[],"sourceRoot":""}